{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectDestructuringEmpty from \"@babel/runtime/helpers/esm/objectDestructuringEmpty\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\User\\\\FullstackReact\\\\lireddit-web\\\\src\\\\pages\\\\forgot-password.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { Box, Button } from \"@chakra-ui/core\";\nimport { Formik, Form } from \"formik\";\nimport { withUrqlClient } from \"next-urql\";\nimport React, { useState } from \"react\";\nimport { InputField } from \"../components/InputField\";\nimport { Wrapper } from \"../components/Wrapper\";\nimport { createUrqlClient } from \"../utils/createUrqlClient\";\nimport { useForgotPasswordMutation } from \"../generated/graphql\";\nexport var ForgotPassword = function ForgotPassword(_ref) {\n  _s();\n\n  _objectDestructuringEmpty(_ref);\n\n  var _useForgotPasswordMut = useForgotPasswordMutation(),\n      _useForgotPasswordMut2 = _slicedToArray(_useForgotPasswordMut, 2),\n      forgotPassword = _useForgotPasswordMut2[1];\n\n  var _useState = useState(false),\n      complete = _useState[0],\n      setComplete = _useState[1];\n\n  return __jsx(Wrapper, {\n    variant: \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 5\n    }\n  }, __jsx(Formik, {\n    initialValues: {\n      email: \"\"\n    },\n    onSubmit: /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return forgotPassword(values);\n\n              case 2:\n                setComplete(true);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }(),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }, function (_ref3) {\n    var isSubmitting = _ref3.isSubmitting;\n    return complete ? __jsx(Box, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 13\n      }\n    }, \"If an account with that email exists, we sent you an email\") : __jsx(Form, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }\n    }, __jsx(InputField, {\n      name: \"email\",\n      placeholder: \"email\",\n      label: \"Email\",\n      type: \"email\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 15\n      }\n    }), __jsx(Button, {\n      mt: 4,\n      type: \"submit\",\n      isLoading: isSubmitting,\n      variantColor: \"teal\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 15\n      }\n    }, \"Forgot Password\"));\n  }));\n};\n\n_s(ForgotPassword, \"vP9s66z997oU40pAUUKPVYCcf90=\", false, function () {\n  return [useForgotPasswordMutation];\n});\n\n_c = ForgotPassword;\nexport default withUrqlClient(createUrqlClient)(ForgotPassword);\n\nvar _c;\n\n$RefreshReg$(_c, \"ForgotPassword\");","map":{"version":3,"sources":["C:/Users/User/FullstackReact/lireddit-web/src/pages/forgot-password.tsx"],"names":["Box","Button","Formik","Form","withUrqlClient","React","useState","InputField","Wrapper","createUrqlClient","useForgotPasswordMutation","ForgotPassword","forgotPassword","complete","setComplete","email","values","isSubmitting"],"mappings":";;;;;;;;;;AAAA,SAASA,GAAT,EAA0BC,MAA1B,QAAwC,iBAAxC;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,QAA7B;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,OAAT,QAAwB,uBAAxB;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AAGA,SAASC,yBAAT,QAA0C,sBAA1C;AAEA,OAAO,IAAMC,cAA4B,GAAG,SAA/BA,cAA+B,OAAQ;AAAA;;AAAA;;AAAA,8BACvBD,yBAAyB,EADF;AAAA;AAAA,MACzCE,cADyC;;AAAA,kBAElBN,QAAQ,CAAC,KAAD,CAFU;AAAA,MAE3CO,QAF2C;AAAA,MAEjCC,WAFiC;;AAGlD,SACE,MAAC,OAAD;AAAS,IAAA,OAAO,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AACE,IAAA,aAAa,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KADjB;AAEE,IAAA,QAAQ;AAAA,2EAAE,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACFJ,cAAc,CAACI,MAAD,CADZ;;AAAA;AAERF,gBAAAA,WAAW,CAAC,IAAD,CAAX;;AAFQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;AAAA,OAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOG;AAAA,QAAGG,YAAH,SAAGA,YAAH;AAAA,WACCJ,QAAQ,GACN,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oEADM,GAKN,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,UAAD;AACE,MAAA,IAAI,EAAC,OADP;AAEE,MAAA,WAAW,EAAC,OAFd;AAGE,MAAA,KAAK,EAAC,OAHR;AAIE,MAAA,IAAI,EAAC,OAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAQE,MAAC,MAAD;AACE,MAAA,EAAE,EAAE,CADN;AAEE,MAAA,IAAI,EAAC,QAFP;AAGE,MAAA,SAAS,EAAEI,YAHb;AAIE,MAAA,YAAY,EAAC,MAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBARF,CANH;AAAA,GAPH,CADF,CADF;AAqCD,CAxCM;;GAAMN,c;UACgBD,yB;;;KADhBC,c;AA0Cb,eAAeP,cAAc,CAACK,gBAAD,CAAd,CAAiCE,cAAjC,CAAf","sourcesContent":["import { Box, Flex, Link, Button } from \"@chakra-ui/core\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { withUrqlClient } from \"next-urql\";\r\nimport React, { useState } from \"react\";\r\nimport { InputField } from \"../components/InputField\";\r\nimport { Wrapper } from \"../components/Wrapper\";\r\nimport { createUrqlClient } from \"../utils/createUrqlClient\";\r\nimport { toErrorMap } from \"../utils/toErrorMap\";\r\nimport login from \"./login\";\r\nimport { useForgotPasswordMutation } from \"../generated/graphql\";\r\n\r\nexport const ForgotPassword: React.FC<{}> = ({}) => {\r\n  const [, forgotPassword] = useForgotPasswordMutation();\r\n  const [complete, setComplete] = useState(false);\r\n  return (\r\n    <Wrapper variant=\"small\">\r\n      <Formik\r\n        initialValues={{ email: \"\" }}\r\n        onSubmit={async (values) => {\r\n          await forgotPassword(values);\r\n          setComplete(true);\r\n        }}\r\n      >\r\n        {({ isSubmitting }) =>\r\n          complete ? (\r\n            <Box>\r\n              If an account with that email exists, we sent you an email\r\n            </Box>\r\n          ) : (\r\n            <Form>\r\n              <InputField\r\n                name=\"email\"\r\n                placeholder=\"email\"\r\n                label=\"Email\"\r\n                type=\"email\"\r\n              />\r\n\r\n              <Button\r\n                mt={4}\r\n                type=\"submit\"\r\n                isLoading={isSubmitting}\r\n                variantColor=\"teal\"\r\n              >\r\n                Forgot Password\r\n              </Button>\r\n            </Form>\r\n          )\r\n        }\r\n      </Formik>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default withUrqlClient(createUrqlClient)(ForgotPassword);\r\n"]},"metadata":{},"sourceType":"module"}