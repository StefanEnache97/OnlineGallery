{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\FullstackReact\\\\lireddit-web\\\\src\\\\pages\\\\change-password\\\\[token].tsx\";\nvar __jsx = React.createElement;\nimport { Box, Button } from \"@chakra-ui/core\";\nimport { Formik, Form } from \"formik\";\nimport { useRouter } from \"next/router\";\nimport React, { useState } from \"react\";\nimport { InputField } from \"../../components/InputField\";\nimport { Wrapper } from \"../../components/Wrapper\";\nimport { useChangePasswordMutation } from \"../../generated/graphql\";\nimport { toErrorMap } from \"../../utils/toErrorMap\";\nexport const ChangePassword = ({\n  token\n}) => {\n  const router = useRouter();\n  const [, changePassword] = useChangePasswordMutation();\n  const {\n    0: tokenError,\n    1: setTokenError\n  } = useState(\"\");\n  return __jsx(Wrapper, {\n    variant: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, __jsx(Formik, {\n    initialValues: {\n      newPassword: \"\"\n    },\n    onSubmit: async (values, {\n      setErrors\n    }) => {\n      var _response$data, _response$data2;\n\n      const response = await changePassword({\n        newPassword: values.newPassword,\n        token\n      });\n\n      if ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.changePassword.errors) {\n        const errorMap = toErrorMap(response.data.changePassword.errors);\n\n        if (\"token\" in errorMap) {\n          setTokenError(errorMap.token);\n        }\n\n        setErrors(errorMap);\n      } else if ((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.changePassword.user) {\n        //worked\n        router.push(\"/\");\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }\n  }, ({\n    isSubmitting\n  }) => __jsx(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }\n  }, __jsx(InputField, {\n    name: \"newPassword\",\n    placeholder: \"enter a new password\",\n    label: \"New Password\",\n    type: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }), tokenError ? __jsx(Box, {\n    color: \"red\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 27\n    }\n  }, tokenError) : null, __jsx(Button, {\n    mt: 4,\n    type: \"submit\",\n    isLoading: isSubmitting,\n    variantColor: \"teal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, \"change password\"))));\n};\n\nChangePassword.getInitialProps = ({\n  query\n}) => {\n  return {\n    token: query.token\n  };\n};\n\nexport default ChangePassword;","map":{"version":3,"sources":["C:/Users/User/FullstackReact/lireddit-web/src/pages/change-password/[token].tsx"],"names":["Box","Button","Formik","Form","useRouter","React","useState","InputField","Wrapper","useChangePasswordMutation","toErrorMap","ChangePassword","token","router","changePassword","tokenError","setTokenError","newPassword","values","setErrors","response","data","errors","errorMap","user","push","isSubmitting","getInitialProps","query"],"mappings":";;AAAA,SAASA,GAAT,EAAcC,MAAd,QAA4B,iBAA5B;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,QAA7B;AAEA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAASC,yBAAT,QAA0C,yBAA1C;AACA,SAASC,UAAT,QAA2B,wBAA3B;AAGA,OAAO,MAAMC,cAA2C,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AACxE,QAAMC,MAAM,GAAGT,SAAS,EAAxB;AACA,QAAM,GAAGU,cAAH,IAAqBL,yBAAyB,EAApD;AACA,QAAM;AAAA,OAACM,UAAD;AAAA,OAAaC;AAAb,MAA8BV,QAAQ,CAAC,EAAD,CAA5C;AACA,SACE,MAAC,OAAD;AAAS,IAAA,OAAO,EAAC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AACE,IAAA,aAAa,EAAE;AAAEW,MAAAA,WAAW,EAAE;AAAf,KADjB;AAEE,IAAA,QAAQ,EAAE,OAAOC,MAAP,EAAe;AAAEC,MAAAA;AAAF,KAAf,KAAiC;AAAA;;AACzC,YAAMC,QAAQ,GAAG,MAAMN,cAAc,CAAC;AACpCG,QAAAA,WAAW,EAAEC,MAAM,CAACD,WADgB;AAEpCL,QAAAA;AAFoC,OAAD,CAArC;;AAIA,4BAAIQ,QAAQ,CAACC,IAAb,mDAAI,eAAeP,cAAf,CAA8BQ,MAAlC,EAA0C;AACxC,cAAMC,QAAQ,GAAGb,UAAU,CAACU,QAAQ,CAACC,IAAT,CAAcP,cAAd,CAA6BQ,MAA9B,CAA3B;;AACA,YAAI,WAAWC,QAAf,EAAyB;AACvBP,UAAAA,aAAa,CAACO,QAAQ,CAACX,KAAV,CAAb;AACD;;AACDO,QAAAA,SAAS,CAACI,QAAD,CAAT;AACD,OAND,MAMO,uBAAIH,QAAQ,CAACC,IAAb,oDAAI,gBAAeP,cAAf,CAA8BU,IAAlC,EAAwC;AAC7C;AACAX,QAAAA,MAAM,CAACY,IAAP,CAAY,GAAZ;AACD;AACF,KAjBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAmBG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KACC,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AACE,IAAA,IAAI,EAAC,aADP;AAEE,IAAA,WAAW,EAAC,sBAFd;AAGE,IAAA,KAAK,EAAC,cAHR;AAIE,IAAA,IAAI,EAAC,UAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAOGX,UAAU,GAAG,MAAC,GAAD;AAAK,IAAA,KAAK,EAAC,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAkBA,UAAlB,CAAH,GAAyC,IAPtD,EAQE,MAAC,MAAD;AACE,IAAA,EAAE,EAAE,CADN;AAEE,IAAA,IAAI,EAAC,QAFP;AAGE,IAAA,SAAS,EAAEW,YAHb;AAIE,IAAA,YAAY,EAAC,MAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBARF,CApBJ,CADF,CADF;AA2CD,CA/CM;;AAiDPf,cAAc,CAACgB,eAAf,GAAiC,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAe;AAC9C,SAAO;AACLhB,IAAAA,KAAK,EAAEgB,KAAK,CAAChB;AADR,GAAP;AAGD,CAJD;;AAMA,eAAeD,cAAf","sourcesContent":["import { Box, Button } from \"@chakra-ui/core\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { NextPage } from \"next\";\r\nimport { useRouter } from \"next/router\";\r\nimport React, { useState } from \"react\";\r\nimport { InputField } from \"../../components/InputField\";\r\nimport { Wrapper } from \"../../components/Wrapper\";\r\nimport { useChangePasswordMutation } from \"../../generated/graphql\";\r\nimport { toErrorMap } from \"../../utils/toErrorMap\";\r\nimport login from \"../login\";\r\n\r\nexport const ChangePassword: NextPage<{ token: string }> = ({ token }) => {\r\n  const router = useRouter();\r\n  const [, changePassword] = useChangePasswordMutation();\r\n  const [tokenError, setTokenError] = useState(\"\");\r\n  return (\r\n    <Wrapper variant=\"small\">\r\n      <Formik\r\n        initialValues={{ newPassword: \"\" }}\r\n        onSubmit={async (values, { setErrors }) => {\r\n          const response = await changePassword({\r\n            newPassword: values.newPassword,\r\n            token,\r\n          });\r\n          if (response.data?.changePassword.errors) {\r\n            const errorMap = toErrorMap(response.data.changePassword.errors);\r\n            if (\"token\" in errorMap) {\r\n              setTokenError(errorMap.token);\r\n            }\r\n            setErrors(errorMap);\r\n          } else if (response.data?.changePassword.user) {\r\n            //worked\r\n            router.push(\"/\");\r\n          }\r\n        }}\r\n      >\r\n        {({ isSubmitting }) => (\r\n          <Form>\r\n            <InputField\r\n              name=\"newPassword\"\r\n              placeholder=\"enter a new password\"\r\n              label=\"New Password\"\r\n              type=\"password\"\r\n            />\r\n            {tokenError ? <Box color=\"red\">{tokenError}</Box> : null}\r\n            <Button\r\n              mt={4}\r\n              type=\"submit\"\r\n              isLoading={isSubmitting}\r\n              variantColor=\"teal\"\r\n            >\r\n              change password\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nChangePassword.getInitialProps = ({ query }) => {\r\n  return {\r\n    token: query.token as string,\r\n  };\r\n};\r\n\r\nexport default ChangePassword;\r\n"]},"metadata":{},"sourceType":"module"}