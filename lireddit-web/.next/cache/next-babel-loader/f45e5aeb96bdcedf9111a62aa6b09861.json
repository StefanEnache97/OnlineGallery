{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectDestructuringEmpty from \"@babel/runtime/helpers/esm/objectDestructuringEmpty\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\User\\\\FullstackReact\\\\lireddit-web\\\\src\\\\pages\\\\create-post.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { Box, Button } from \"@chakra-ui/core\";\nimport { Form, Formik } from \"formik\";\nimport React, { useEffect } from \"react\";\nimport { InputField } from \"../components/InputField\";\nimport { useCreatePostMutation, useMeQuery } from \"../generated/graphql\";\nimport { useRouter } from \"next/router\";\nimport { withUrqlClient } from \"next-urql\";\nimport { createUrqlClient } from \"../utils/createUrqlClient\";\nimport { Layout } from \"../components/Layout\";\n\nvar CreatePost = function CreatePost(_ref) {\n  _s();\n\n  _objectDestructuringEmpty(_ref);\n\n  var _useMeQuery = useMeQuery(),\n      _useMeQuery2 = _slicedToArray(_useMeQuery, 1),\n      _useMeQuery2$ = _useMeQuery2[0],\n      data = _useMeQuery2$.data,\n      fetching = _useMeQuery2$.fetching;\n\n  var router = useRouter();\n  useEffect(function () {\n    if (!fetching && (data === null || data === void 0 ? void 0 : data.me)) {\n      router.replace(\"/login\");\n    }\n  }, [fetching, data, router]);\n\n  var _useCreatePostMutatio = useCreatePostMutation(),\n      _useCreatePostMutatio2 = _slicedToArray(_useCreatePostMutatio, 2),\n      createPost = _useCreatePostMutatio2[1];\n\n  return __jsx(Layout, {\n    variant: \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, __jsx(Formik, {\n    initialValues: {\n      title: \"\",\n      text: \"\"\n    },\n    onSubmit: /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n        var _yield$createPost, error;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return createPost({\n                  input: values\n                });\n\n              case 2:\n                _yield$createPost = _context.sent;\n                error = _yield$createPost.error;\n\n                if (!error) {\n                  router.push(\"/\");\n                }\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }(),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, function (_ref3) {\n    var isSubmitting = _ref3.isSubmitting;\n    return __jsx(Form, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }\n    }, __jsx(InputField, {\n      name: \"title\",\n      placeholder: \"title\",\n      label: \"Title\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }\n    }), __jsx(Box, {\n      mt: 4,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }\n    }, __jsx(InputField, {\n      textarea: true,\n      name: \"text\",\n      placeholder: \"text...\",\n      label: \"Body\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 15\n      }\n    })), __jsx(Button, {\n      mt: 4,\n      type: \"submit\",\n      isLoading: isSubmitting,\n      variantColor: \"teal\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 13\n      }\n    }, \"Create Post\"));\n  }));\n};\n\n_s(CreatePost, \"wDwNbWZ/7G+cLSU+bpf5FxkOmy4=\", false, function () {\n  return [useMeQuery, useRouter, useCreatePostMutation];\n});\n\n_c = CreatePost;\nexport default withUrqlClient(createUrqlClient)(CreatePost);\n\nvar _c;\n\n$RefreshReg$(_c, \"CreatePost\");","map":{"version":3,"sources":["C:/Users/User/FullstackReact/lireddit-web/src/pages/create-post.tsx"],"names":["Box","Button","Form","Formik","React","useEffect","InputField","useCreatePostMutation","useMeQuery","useRouter","withUrqlClient","createUrqlClient","Layout","CreatePost","data","fetching","router","me","replace","createPost","title","text","values","input","error","push","isSubmitting"],"mappings":"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","sourcesContent":["import { Box, Button } from \"@chakra-ui/core\";\r\nimport { Form, Formik } from \"formik\";\r\nimport React, { useEffect } from \"react\";\r\nimport { InputField } from \"../components/InputField\";\r\nimport { useCreatePostMutation, useMeQuery } from \"../generated/graphql\";\r\nimport { useRouter } from \"next/router\";\r\nimport { withUrqlClient } from \"next-urql\";\r\nimport { createUrqlClient } from \"../utils/createUrqlClient\";\r\nimport { Layout } from \"../components/Layout\";\r\n\r\nconst CreatePost: React.FC<{}> = ({}) => {\r\n  const [{ data, fetching }] = useMeQuery();\r\n  const router = useRouter();\r\n  useEffect(() => {\r\n    if (!fetching && data?.me) {\r\n      router.replace(\"/login\");\r\n    }\r\n  }, [fetching, data, router]);\r\n\r\n  const [, createPost] = useCreatePostMutation();\r\n  return (\r\n    <Layout variant=\"small\">\r\n      <Formik\r\n        initialValues={{ title: \"\", text: \"\" }}\r\n        onSubmit={async (values) => {\r\n          const { error } = await createPost({ input: values });\r\n\r\n          if (!error) {\r\n            router.push(\"/\");\r\n          }\r\n        }}\r\n      >\r\n        {({ isSubmitting }) => (\r\n          <Form>\r\n            <InputField name=\"title\" placeholder=\"title\" label=\"Title\" />\r\n            <Box mt={4}>\r\n              <InputField\r\n                textarea\r\n                name=\"text\"\r\n                placeholder=\"text...\"\r\n                label=\"Body\"\r\n              />\r\n            </Box>\r\n\r\n            <Button\r\n              mt={4}\r\n              type=\"submit\"\r\n              isLoading={isSubmitting}\r\n              variantColor=\"teal\"\r\n            >\r\n              Create Post\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default withUrqlClient(createUrqlClient)(CreatePost);\r\n"]},"metadata":{},"sourceType":"module"}