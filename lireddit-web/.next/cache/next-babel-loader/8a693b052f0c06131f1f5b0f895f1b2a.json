{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n                    fragment __ on Post {\\n                      points\\n                      voteStatus\\n                    }\\n                  \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n                  fragment _ on Post {\\n                    id\\n                    points\\n                    voteStatus\\n                  }\\n                \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { dedupExchange, fetchExchange, stringifyVariables } from \"urql\";\nimport { cacheExchange } from \"@urql/exchange-graphcache\";\nimport { MeDocument } from \"../generated/graphql\";\nimport gql from \"graphql-tag\";\nimport { betterUpdateQuery } from \"./betterUpdateQuery\";\nimport { pipe, tap } from \"wonka\";\nimport Router from \"next/router\";\nimport { isServer } from \"./isServer\";\n\nvar errorExchange = function errorExchange(_ref) {\n  var forward = _ref.forward;\n  return function (ops$) {\n    return pipe(forward(ops$), tap(function (_ref2) {\n      var error = _ref2.error;\n\n      if (error === null || error === void 0 ? void 0 : error.message.includes(\"not authenticated\")) {\n        Router.replace(\"/login\");\n      }\n    }));\n  };\n};\n\nvar voteStatusPost = function voteStatusPost() {\n  return function (_parent, fieldArgs, cache, info) {\n    var entityKey = info.parentKey,\n        fieldName = info.fieldName;\n    console.log(\"entity key:\", entityKey);\n    console.log(\"field name:\", fieldName);\n    var allFields = cache.inspectFields(entityKey);\n    console.log(\"all fields:\", allFields);\n    var fieldInfos = allFields.filter(function (info) {\n      return info.fieldName === fieldName;\n    });\n    console.log(\"field infos\", fieldInfos);\n    var size = fieldInfos.length;\n\n    if (size === 0) {\n      return undefined;\n    }\n\n    var vote = null;\n    var result = [];\n    fieldInfos.forEach(function (fi) {\n      var key = cache.resolveFieldByKey(entityKey, fi.fieldKey);\n      console.log(\"key:\", key);\n      var data = cache.resolve({\n        __typename: \"Query\"\n      }, \"post\", {\n        key: key\n      });\n      console.log(\"data: \", data);\n\n      var _vote = cache.resolve(key, \"voteStatus\");\n\n      console.log(\"_vote: \", _vote);\n\n      if (!_vote) {\n        vote = _vote;\n      }\n\n      result = data;\n    }); //I'm getting null for result?\n    // const _id = result.slice(5);\n    // console.log(\"_id:\", _id);\n\n    return {\n      __typename: \"Post\",\n      post: result,\n      voteStatus: vote\n    };\n  };\n};\n\nvar cursorPagination = function cursorPagination() {\n  return function (_parent, fieldArgs, cache, info) {\n    var entityKey = info.parentKey,\n        fieldName = info.fieldName;\n    var allFields = cache.inspectFields(entityKey);\n    var fieldInfos = allFields.filter(function (info) {\n      return info.fieldName === fieldName;\n    });\n    var size = fieldInfos.length;\n\n    if (size === 0) {\n      return undefined;\n    }\n\n    console.log(\"cache\", cache);\n    console.log(\"entity key:\", entityKey);\n    var fieldKey = \"\".concat(fieldName, \"(\").concat(stringifyVariables(fieldArgs), \")\");\n    console.log(\"fieldKey:\", fieldKey);\n    var isItInTheCache = cache.resolve(cache.resolveFieldByKey(entityKey, fieldKey), \"posts\");\n    console.log(\"resolveFieldByKey:\", cache.resolveFieldByKey(entityKey, fieldKey));\n    info.partial = !isItInTheCache;\n    console.log(\"info partial:\", info.partial);\n    var hasMore = true;\n    var results = [];\n    fieldInfos.forEach(function (fi) {\n      var key = cache.resolveFieldByKey(entityKey, fi.fieldKey);\n      var data = cache.resolve(key, \"posts\");\n      console.log(data);\n\n      var _hasMore = cache.resolve(key, \"hasMore\");\n\n      if (!_hasMore) {\n        hasMore = _hasMore;\n      }\n\n      results.push.apply(results, _toConsumableArray(data));\n    });\n    console.log(\"results:\", results);\n    return {\n      __typename: \"PaginatedPosts\",\n      hasMore: hasMore,\n      posts: results\n    }; // const visited = new Set();\n    // let result: NullArray<string> = [];\n    // let prevOffset: number | null = null;\n    // for (let i = 0; i < size; i++) {\n    //   const { fieldKey, arguments: args } = fieldInfos[i];\n    //   if (args === null || !compareArgs(fieldArgs, args)) {\n    //     continue;\n    //   }\n    //   const links = cache.resolveFieldByKey(entityKey, fieldKey) as string[];\n    //   const currentOffset = args[cursorArgument];\n    //   if (\n    //     links === null ||\n    //     links.length === 0 ||\n    //     typeof currentOffset !== 'number'\n    //   ) {\n    //     continue;\n    //   }\n    //   if (!prevOffset || currentOffset > prevOffset) {\n    //     for (let j = 0; j < links.length; j++) {\n    //       const link = links[j];\n    //       if (visited.has(link)) continue;\n    //       result.push(link);\n    //       visited.add(link);\n    //     }\n    //   } else {\n    //     const tempResult: NullArray<string> = [];\n    //     for (let j = 0; j < links.length; j++) {\n    //       const link = links[j];\n    //       if (visited.has(link)) continue;\n    //       tempResult.push(link);\n    //       visited.add(link);\n    //     }\n    //     result = [...tempResult, ...result];\n    //   }\n    //   prevOffset = currentOffset;\n    // }\n    // const hasCurrentPage = cache.resolve(entityKey, fieldName, fieldArgs);\n    // if (hasCurrentPage) {\n    //   return result;\n    // } else if (!(info as any).store.schema) {\n    //   return undefined;\n    // } else {\n    //   info.partial = true;\n    //   return result;\n    // }\n  };\n};\n\nexport var createUrqlClient = function createUrqlClient(ssrExchange, ctx) {\n  var cookie = \"\";\n\n  if (isServer()) {\n    console.log(\"We are server side rendering\");\n    cookie = ctx.req.headers.cookie;\n  }\n\n  return {\n    url: \"http://localhost:4000/graphql\",\n    fetchOptions: {\n      credentials: \"include\",\n      headers: cookie ? {\n        cookie: cookie\n      } : undefined\n    },\n    exchanges: [dedupExchange, cacheExchange({\n      keys: {\n        PaginatedPosts: function PaginatedPosts() {\n          return null;\n        }\n      },\n      resolvers: {\n        Query: {\n          posts: cursorPagination(),\n          post: voteStatusPost()\n        }\n      },\n      updates: {\n        Mutation: {\n          deletePost: function deletePost(_result, args, cache, info) {\n            cache.invalidate({\n              __typename: \"Post\",\n              id: args.id\n            });\n          },\n          vote: function vote(_result, args, cache, info) {\n            var _ref3 = args,\n                postId = _ref3.postId,\n                value = _ref3.value;\n            var data = cache.readFragment(gql(_templateObject()), {\n              id: postId\n            });\n            console.log(data);\n\n            if (data) {\n              if (data.voteStatus === value) {\n                return;\n              }\n\n              var newPoints = data.points + (!data.voteStatus ? 1 : 2) * value;\n              cache.writeFragment(gql(_templateObject2()), {\n                id: postId,\n                points: newPoints,\n                voteStatus: value\n              });\n            }\n          },\n          createPost: function createPost(_result, args, cache, info) {\n            var allFields = cache.inspectFields(\"Query\");\n            var fieldInfos = allFields.filter(function (info) {\n              return info.fieldName === \"posts\";\n            });\n            fieldInfos.forEach(function (fi) {\n              cache.invalidate(\"Query\", \"posts\", fi.arguments || {});\n            });\n          },\n          logout: function logout(_result, args, cache, info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function () {\n              return {\n                me: null\n              };\n            });\n          },\n          login: function login(_result, args, cache, info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function (result, query) {\n              if (result.login.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.login.user\n                };\n              }\n            });\n          },\n          register: function register(_result, args, cache, info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function (result, query) {\n              if (result.register.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.register.user\n                };\n              }\n            });\n          }\n        }\n      }\n    }), errorExchange, ssrExchange, fetchExchange]\n  };\n};","map":{"version":3,"sources":["C:/Users/User/FullstackReact/lireddit-web/src/utils/createUrqlClient.ts"],"names":["dedupExchange","fetchExchange","stringifyVariables","cacheExchange","MeDocument","gql","betterUpdateQuery","pipe","tap","Router","isServer","errorExchange","forward","ops$","error","message","includes","replace","voteStatusPost","_parent","fieldArgs","cache","info","entityKey","parentKey","fieldName","console","log","allFields","inspectFields","fieldInfos","filter","size","length","undefined","vote","result","forEach","fi","key","resolveFieldByKey","fieldKey","data","resolve","__typename","_vote","post","voteStatus","cursorPagination","isItInTheCache","partial","hasMore","results","_hasMore","push","posts","createUrqlClient","ssrExchange","ctx","cookie","req","headers","url","fetchOptions","credentials","exchanges","keys","PaginatedPosts","resolvers","Query","updates","Mutation","deletePost","_result","args","invalidate","id","postId","value","readFragment","newPoints","points","writeFragment","createPost","arguments","logout","query","me","login","errors","user","register"],"mappings":"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","sourcesContent":["import {\r\n  dedupExchange,\r\n  Exchange,\r\n  fetchExchange,\r\n  stringifyVariables,\r\n} from \"urql\";\r\nimport { cacheExchange, Resolver } from \"@urql/exchange-graphcache\";\r\nimport {\r\n  LogoutMutation,\r\n  MeQuery,\r\n  MeDocument,\r\n  LoginMutation,\r\n  RegisterMutation,\r\n  VoteMutationVariables,\r\n  DeletePostMutationVariables,\r\n} from \"../generated/graphql\";\r\nimport gql from \"graphql-tag\";\r\nimport { betterUpdateQuery } from \"./betterUpdateQuery\";\r\nimport { pipe, tap } from \"wonka\";\r\nimport Router from \"next/router\";\r\nimport { isServer } from \"./isServer\";\r\n\r\nconst errorExchange: Exchange = ({ forward }) => (ops$) => {\r\n  return pipe(\r\n    forward(ops$),\r\n    tap(({ error }) => {\r\n      if (error?.message.includes(\"not authenticated\")) {\r\n        Router.replace(\"/login\");\r\n      }\r\n    })\r\n  );\r\n};\r\n\r\nconst voteStatusPost = (): Resolver => {\r\n  return (_parent, fieldArgs, cache, info) => {\r\n    const { parentKey: entityKey, fieldName } = info;\r\n    console.log(\"entity key:\", entityKey);\r\n    console.log(\"field name:\", fieldName);\r\n    const allFields = cache.inspectFields(entityKey);\r\n    console.log(\"all fields:\", allFields);\r\n    const fieldInfos = allFields.filter((info) => info.fieldName === fieldName);\r\n    console.log(\"field infos\", fieldInfos);\r\n    const size = fieldInfos.length;\r\n    if (size === 0) {\r\n      return undefined;\r\n    }\r\n\r\n    let vote = null;\r\n    let result: string[] = [];\r\n    fieldInfos.forEach((fi) => {\r\n      const key = cache.resolveFieldByKey(entityKey, fi.fieldKey) as string;\r\n      console.log(\"key:\", key);\r\n      const data = cache.resolve({ __typename: \"Query\" }, \"post\", {\r\n        key,\r\n      });\r\n      console.log(\"data: \", data);\r\n      const _vote = cache.resolve(key, \"voteStatus\");\r\n      console.log(\"_vote: \", _vote);\r\n      if (!_vote) {\r\n        vote = _vote as boolean;\r\n      }\r\n      result = data as string[];\r\n    });\r\n    //I'm getting null for result?\r\n    // const _id = result.slice(5);\r\n    // console.log(\"_id:\", _id);\r\n    return {\r\n      __typename: \"Post\",\r\n      post: result,\r\n      voteStatus: vote,\r\n    };\r\n  };\r\n};\r\n\r\nconst cursorPagination = (): Resolver => {\r\n  return (_parent, fieldArgs, cache, info) => {\r\n    const { parentKey: entityKey, fieldName } = info;\r\n\r\n    const allFields = cache.inspectFields(entityKey);\r\n    const fieldInfos = allFields.filter((info) => info.fieldName === fieldName);\r\n    const size = fieldInfos.length;\r\n    if (size === 0) {\r\n      return undefined;\r\n    }\r\n    console.log(\"cache\", cache);\r\n\r\n    console.log(\"entity key:\", entityKey);\r\n\r\n    const fieldKey = `${fieldName}(${stringifyVariables(fieldArgs)})`;\r\n    console.log(\"fieldKey:\", fieldKey);\r\n    const isItInTheCache = cache.resolve(\r\n      cache.resolveFieldByKey(entityKey, fieldKey) as string,\r\n      \"posts\"\r\n    );\r\n    console.log(\r\n      \"resolveFieldByKey:\",\r\n      cache.resolveFieldByKey(entityKey, fieldKey)\r\n    );\r\n\r\n    info.partial = !isItInTheCache;\r\n    console.log(\"info partial:\", info.partial);\r\n    let hasMore = true;\r\n    const results: string[] = [];\r\n    fieldInfos.forEach((fi) => {\r\n      const key = cache.resolveFieldByKey(entityKey, fi.fieldKey) as string;\r\n      const data = cache.resolve(key, \"posts\") as string[];\r\n      console.log(data);\r\n      const _hasMore = cache.resolve(key, \"hasMore\");\r\n      if (!_hasMore) {\r\n        hasMore = _hasMore as boolean;\r\n      }\r\n      results.push(...data);\r\n    });\r\n\r\n    console.log(\"results:\", results);\r\n    return {\r\n      __typename: \"PaginatedPosts\",\r\n      hasMore,\r\n      posts: results,\r\n    };\r\n\r\n    // const visited = new Set();\r\n    // let result: NullArray<string> = [];\r\n    // let prevOffset: number | null = null;\r\n\r\n    // for (let i = 0; i < size; i++) {\r\n    //   const { fieldKey, arguments: args } = fieldInfos[i];\r\n    //   if (args === null || !compareArgs(fieldArgs, args)) {\r\n    //     continue;\r\n    //   }\r\n\r\n    //   const links = cache.resolveFieldByKey(entityKey, fieldKey) as string[];\r\n    //   const currentOffset = args[cursorArgument];\r\n\r\n    //   if (\r\n    //     links === null ||\r\n    //     links.length === 0 ||\r\n    //     typeof currentOffset !== 'number'\r\n    //   ) {\r\n    //     continue;\r\n    //   }\r\n\r\n    //   if (!prevOffset || currentOffset > prevOffset) {\r\n    //     for (let j = 0; j < links.length; j++) {\r\n    //       const link = links[j];\r\n    //       if (visited.has(link)) continue;\r\n    //       result.push(link);\r\n    //       visited.add(link);\r\n    //     }\r\n    //   } else {\r\n    //     const tempResult: NullArray<string> = [];\r\n    //     for (let j = 0; j < links.length; j++) {\r\n    //       const link = links[j];\r\n    //       if (visited.has(link)) continue;\r\n    //       tempResult.push(link);\r\n    //       visited.add(link);\r\n    //     }\r\n    //     result = [...tempResult, ...result];\r\n    //   }\r\n\r\n    //   prevOffset = currentOffset;\r\n    // }\r\n\r\n    // const hasCurrentPage = cache.resolve(entityKey, fieldName, fieldArgs);\r\n    // if (hasCurrentPage) {\r\n    //   return result;\r\n    // } else if (!(info as any).store.schema) {\r\n    //   return undefined;\r\n    // } else {\r\n    //   info.partial = true;\r\n    //   return result;\r\n    // }\r\n  };\r\n};\r\n\r\nexport const createUrqlClient = (ssrExchange: any, ctx: any) => {\r\n  let cookie = \"\";\r\n  if (isServer()) {\r\n    console.log(\"We are server side rendering\");\r\n    cookie = ctx.req.headers.cookie;\r\n  }\r\n  return {\r\n    url: \"http://localhost:4000/graphql\",\r\n    fetchOptions: {\r\n      credentials: \"include\" as const,\r\n      headers: cookie\r\n        ? {\r\n            cookie,\r\n          }\r\n        : undefined,\r\n    },\r\n    exchanges: [\r\n      dedupExchange,\r\n      cacheExchange({\r\n        keys: {\r\n          PaginatedPosts: () => null,\r\n        },\r\n        resolvers: {\r\n          Query: {\r\n            posts: cursorPagination(),\r\n            post: voteStatusPost(),\r\n          },\r\n        },\r\n        updates: {\r\n          Mutation: {\r\n            deletePost: (_result, args, cache, info) => {\r\n              cache.invalidate({\r\n                __typename: \"Post\",\r\n                id: (args as DeletePostMutationVariables).id,\r\n              });\r\n            },\r\n            vote: (_result, args, cache, info) => {\r\n              const { postId, value } = args as VoteMutationVariables;\r\n              const data = cache.readFragment(\r\n                gql`\r\n                  fragment _ on Post {\r\n                    id\r\n                    points\r\n                    voteStatus\r\n                  }\r\n                `,\r\n                { id: postId } as any\r\n              );\r\n              console.log(data);\r\n              if (data) {\r\n                if (data.voteStatus === value) {\r\n                  return;\r\n                }\r\n                const newPoints =\r\n                  (data.points as number) + (!data.voteStatus ? 1 : 2) * value;\r\n                cache.writeFragment(\r\n                  gql`\r\n                    fragment __ on Post {\r\n                      points\r\n                      voteStatus\r\n                    }\r\n                  `,\r\n                  { id: postId, points: newPoints, voteStatus: value } as any\r\n                );\r\n              }\r\n            },\r\n\r\n            createPost: (_result, args, cache, info) => {\r\n              const allFields = cache.inspectFields(\"Query\");\r\n              const fieldInfos = allFields.filter(\r\n                (info) => info.fieldName === \"posts\"\r\n              );\r\n              fieldInfos.forEach((fi) => {\r\n                cache.invalidate(\"Query\", \"posts\", fi.arguments || {});\r\n              });\r\n            },\r\n            logout: (_result, args, cache, info) => {\r\n              betterUpdateQuery<LogoutMutation, MeQuery>(\r\n                cache,\r\n                { query: MeDocument },\r\n                _result,\r\n                () => ({ me: null })\r\n              );\r\n            },\r\n            login: (_result, args, cache, info) => {\r\n              betterUpdateQuery<LoginMutation, MeQuery>(\r\n                cache,\r\n                { query: MeDocument },\r\n                _result,\r\n                (result, query) => {\r\n                  if (result.login.errors) {\r\n                    return query;\r\n                  } else {\r\n                    return {\r\n                      me: result.login.user,\r\n                    };\r\n                  }\r\n                }\r\n              );\r\n            },\r\n            register: (_result, args, cache, info) => {\r\n              betterUpdateQuery<RegisterMutation, MeQuery>(\r\n                cache,\r\n                { query: MeDocument },\r\n                _result,\r\n                (result, query) => {\r\n                  if (result.register.errors) {\r\n                    return query;\r\n                  } else {\r\n                    return {\r\n                      me: result.register.user,\r\n                    };\r\n                  }\r\n                }\r\n              );\r\n            },\r\n          },\r\n        },\r\n      }),\r\n      errorExchange,\r\n      ssrExchange,\r\n      fetchExchange,\r\n    ],\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}