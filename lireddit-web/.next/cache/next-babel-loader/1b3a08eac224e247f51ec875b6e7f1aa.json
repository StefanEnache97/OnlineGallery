{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\User\\\\FullstackReact\\\\lireddit-web\\\\src\\\\pages\\\\index.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport { withUrqlClient } from \"next-urql\";\nimport { createUrqlClient } from \"../utils/createUrqlClient\";\nimport { useMeQuery, usePostsQuery } from \"../generated/graphql\";\nimport { Layout } from \"../components/Layout\";\nimport React, { useState } from \"react\";\nimport { Box, Button, Flex, Heading, Link, Stack, Text } from \"@chakra-ui/core\";\nimport NextLink from \"next/link\";\nimport { UpdootSection } from \"../components/UpdootSection\";\nimport { EditDeletePostButtons } from \"../components/EditDeletePostButtons\";\n\nvar Index = function Index() {\n  _s();\n\n  var _useState = useState({\n    limit: 15,\n    cursor: null\n  }),\n      variables = _useState[0],\n      setVariables = _useState[1];\n\n  var _useMeQuery = useMeQuery(),\n      _useMeQuery2 = _slicedToArray(_useMeQuery, 1),\n      meData = _useMeQuery2[0].data;\n\n  var _usePostsQuery = usePostsQuery({\n    variables: variables\n  }),\n      _usePostsQuery2 = _slicedToArray(_usePostsQuery, 1),\n      _usePostsQuery2$ = _usePostsQuery2[0],\n      data = _usePostsQuery2$.data,\n      fetching = _usePostsQuery2$.fetching;\n\n  if (!fetching && !data) {\n    return __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 12\n      }\n    }, \" query failed for some reason\");\n  }\n\n  return __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, !data && fetching ? __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, \"Loading...\") : __jsx(Stack, {\n    spacing: 8,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, data.posts.posts.map(function (p) {\n    var _meData$me;\n\n    return !p ? null : __jsx(Flex, {\n      key: p.id,\n      p: 5,\n      shadow: \"md\",\n      borderWidth: \"1px\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 15\n      }\n    }, __jsx(UpdootSection, {\n      post: p,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }\n    }), __jsx(Box, {\n      flex: 1,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }\n    }, __jsx(NextLink, {\n      href: \"/post/[id]\",\n      as: \"/post/\".concat(p.id),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 19\n      }\n    }, __jsx(Link, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }\n    }, __jsx(Heading, {\n      fontSize: \"xl\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 23\n      }\n    }, p.title))), __jsx(Text, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 19\n      }\n    }, \"posted by \", p.creator.username), __jsx(Flex, {\n      align: \"center\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 19\n      }\n    }, __jsx(Text, {\n      flex: 1,\n      mt: 4,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }\n    }, p.textSnippet), (meData === null || meData === void 0 ? void 0 : (_meData$me = meData.me) === null || _meData$me === void 0 ? void 0 : _meData$me.id) !== p.creator.id ? null : __jsx(EditDeletePostButtons, {\n      id: p.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 23\n      }\n    }))));\n  })), data && data.posts.hasMore ? __jsx(Flex, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    onClick: function onClick() {\n      setVariables({\n        limit: variables.limit,\n        cursor: data.posts.posts[data.posts.posts.length - 1].createdAt\n      });\n    },\n    isLoading: fetching,\n    m: \"auto\",\n    my: 8,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, \"load more\")) : null);\n};\n\n_s(Index, \"dvIQmdwAEe6wlI5sEZpTgPYRm/o=\", false, function () {\n  return [useMeQuery, usePostsQuery];\n});\n\n_c = Index;\nexport default withUrqlClient(createUrqlClient, {\n  ssr: true\n})(Index);\n\nvar _c;\n\n$RefreshReg$(_c, \"Index\");","map":{"version":3,"sources":["C:/Users/User/FullstackReact/lireddit-web/src/pages/index.tsx"],"names":["withUrqlClient","createUrqlClient","useMeQuery","usePostsQuery","Layout","React","useState","Box","Button","Flex","Heading","Link","Stack","Text","NextLink","UpdootSection","EditDeletePostButtons","Index","limit","cursor","variables","setVariables","meData","data","fetching","posts","map","p","id","title","creator","username","textSnippet","me","hasMore","length","createdAt","ssr"],"mappings":"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","sourcesContent":["import { withUrqlClient } from \"next-urql\";\nimport { createUrqlClient } from \"../utils/createUrqlClient\";\nimport {\n  useDeletePostMutation,\n  useMeQuery,\n  usePostsQuery,\n} from \"../generated/graphql\";\nimport { Layout } from \"../components/Layout\";\nimport React, { useState } from \"react\";\nimport {\n  Box,\n  Button,\n  Flex,\n  Heading,\n  IconButton,\n  Link,\n  Stack,\n  Text,\n} from \"@chakra-ui/core\";\nimport NextLink from \"next/link\";\nimport { UpdootSection } from \"../components/UpdootSection\";\nimport { EditDeletePostButtons } from \"../components/EditDeletePostButtons\";\n\nconst Index = () => {\n  const [variables, setVariables] = useState({\n    limit: 15,\n    cursor: null as null | string,\n  });\n\n  const [{ data: meData }] = useMeQuery();\n  const [{ data, fetching }] = usePostsQuery({\n    variables,\n  });\n\n  if (!fetching && !data) {\n    return <div> query failed for some reason</div>;\n  }\n  return (\n    <Layout>\n      {!data && fetching ? (\n        <div>Loading...</div>\n      ) : (\n        <Stack spacing={8}>\n          {data!.posts.posts.map((p) =>\n            !p ? null : (\n              <Flex key={p.id} p={5} shadow=\"md\" borderWidth=\"1px\">\n                <UpdootSection post={p} />\n                <Box flex={1}>\n                  <NextLink href=\"/post/[id]\" as={`/post/${p.id}`}>\n                    <Link>\n                      <Heading fontSize=\"xl\">{p.title}</Heading>\n                    </Link>\n                  </NextLink>\n                  <Text>posted by {p.creator.username}</Text>\n                  <Flex align=\"center\">\n                    <Text flex={1} mt={4}>\n                      {p.textSnippet}\n                    </Text>\n                    {meData?.me?.id !== p.creator.id ? null : (\n                      <EditDeletePostButtons id={p.id} />\n                    )}\n                  </Flex>\n                </Box>\n              </Flex>\n            )\n          )}\n        </Stack>\n      )}\n      {data && data.posts.hasMore ? (\n        <Flex>\n          <Button\n            onClick={() => {\n              setVariables({\n                limit: variables.limit,\n                cursor: data.posts.posts[data.posts.posts.length - 1].createdAt,\n              });\n            }}\n            isLoading={fetching}\n            m=\"auto\"\n            my={8}\n          >\n            load more\n          </Button>\n        </Flex>\n      ) : null}\n    </Layout>\n  );\n};\n\nexport default withUrqlClient(createUrqlClient, { ssr: true })(Index);\n"]},"metadata":{},"sourceType":"module"}