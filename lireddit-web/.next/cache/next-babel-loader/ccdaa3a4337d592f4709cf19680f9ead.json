{"ast":null,"code":"import { dedupExchange, fetchExchange } from \"urql\";\nimport { cacheExchange } from \"@urql/exchange-graphcache\";\nimport { MeDocument } from \"../generated/graphql\";\nimport { betterUpdateQuery } from \"./betterUpdateQuery\";\nimport { pipe, tap } from \"wonka\";\nimport Router from \"next/router\";\n\nconst errorExchange = ({\n  forward\n}) => ops$ => {\n  return pipe(forward(ops$), tap(({\n    error\n  }) => {\n    if (error === null || error === void 0 ? void 0 : error.message.includes(\"not authenticated\")) {\n      Router.replace(\"/login\");\n    }\n  }));\n};\n\nexport const createUrqlClient = ssrExchange => ({\n  url: \"http://localhost:4000/graphql\",\n  fetchOptions: {\n    credentials: \"include\"\n  },\n  exchanges: [dedupExchange, cacheExchange({\n    updates: {\n      Mutation: {\n        logout: (_result, args, cache, info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, () => ({\n            me: null\n          }));\n        },\n        login: (_result, args, cache, info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, (result, query) => {\n            if (result.login.errors) {\n              return query;\n            } else {\n              return {\n                me: result.login.user\n              };\n            }\n          });\n        },\n        register: (_result, args, cache, info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, (result, query) => {\n            if (result.register.errors) {\n              return query;\n            } else {\n              return {\n                me: result.register.user\n              };\n            }\n          });\n        }\n      }\n    }\n  }), ssrExchange, fetchExchange]\n});","map":{"version":3,"sources":["C:/Users/User/FullstackReact/lireddit-web/src/utils/createUrqlClient.ts"],"names":["dedupExchange","fetchExchange","cacheExchange","MeDocument","betterUpdateQuery","pipe","tap","Router","errorExchange","forward","ops$","error","message","includes","replace","createUrqlClient","ssrExchange","url","fetchOptions","credentials","exchanges","updates","Mutation","logout","_result","args","cache","info","query","me","login","result","errors","user","register"],"mappings":"AAAA,SAASA,aAAT,EAAkCC,aAAlC,QAAuD,MAAvD;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAGEC,UAHF,QAMO,sBANP;AAOA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,OAA1B;AACA,OAAOC,MAAP,MAAmB,aAAnB;;AAEA,MAAMC,aAAuB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkBC,IAAD,IAAU;AACzD,SAAOL,IAAI,CACTI,OAAO,CAACC,IAAD,CADE,EAETJ,GAAG,CAAC,CAAC;AAAEK,IAAAA;AAAF,GAAD,KAAe;AACjB,QAAIA,KAAJ,aAAIA,KAAJ,uBAAIA,KAAK,CAAEC,OAAP,CAAeC,QAAf,CAAwB,mBAAxB,CAAJ,EAAkD;AAChDN,MAAAA,MAAM,CAACO,OAAP,CAAe,QAAf;AACD;AACF,GAJE,CAFM,CAAX;AAQD,CATD;;AAWA,OAAO,MAAMC,gBAAgB,GAAIC,WAAD,KAAuB;AACrDC,EAAAA,GAAG,EAAE,+BADgD;AAErDC,EAAAA,YAAY,EAAE;AACZC,IAAAA,WAAW,EAAE;AADD,GAFuC;AAKrDC,EAAAA,SAAS,EAAE,CACTpB,aADS,EAETE,aAAa,CAAC;AACZmB,IAAAA,OAAO,EAAE;AACPC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,MAAM,EAAE,CAACC,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,KAAgC;AACtCvB,UAAAA,iBAAiB,CACfsB,KADe,EAEf;AAAEE,YAAAA,KAAK,EAAEzB;AAAT,WAFe,EAGfqB,OAHe,EAIf,OAAO;AAAEK,YAAAA,EAAE,EAAE;AAAN,WAAP,CAJe,CAAjB;AAMD,SARO;AASRC,QAAAA,KAAK,EAAE,CAACN,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,KAAgC;AACrCvB,UAAAA,iBAAiB,CACfsB,KADe,EAEf;AAAEE,YAAAA,KAAK,EAAEzB;AAAT,WAFe,EAGfqB,OAHe,EAIf,CAACO,MAAD,EAASH,KAAT,KAAmB;AACjB,gBAAIG,MAAM,CAACD,KAAP,CAAaE,MAAjB,EAAyB;AACvB,qBAAOJ,KAAP;AACD,aAFD,MAEO;AACL,qBAAO;AACLC,gBAAAA,EAAE,EAAEE,MAAM,CAACD,KAAP,CAAaG;AADZ,eAAP;AAGD;AACF,WAZc,CAAjB;AAcD,SAxBO;AAyBRC,QAAAA,QAAQ,EAAE,CAACV,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,KAAgC;AACxCvB,UAAAA,iBAAiB,CACfsB,KADe,EAEf;AAAEE,YAAAA,KAAK,EAAEzB;AAAT,WAFe,EAGfqB,OAHe,EAIf,CAACO,MAAD,EAASH,KAAT,KAAmB;AACjB,gBAAIG,MAAM,CAACG,QAAP,CAAgBF,MAApB,EAA4B;AAC1B,qBAAOJ,KAAP;AACD,aAFD,MAEO;AACL,qBAAO;AACLC,gBAAAA,EAAE,EAAEE,MAAM,CAACG,QAAP,CAAgBD;AADf,eAAP;AAGD;AACF,WAZc,CAAjB;AAcD;AAxCO;AADH;AADG,GAAD,CAFJ,EAgDTjB,WAhDS,EAiDTf,aAjDS;AAL0C,CAAvB,CAAzB","sourcesContent":["import { dedupExchange, Exchange, fetchExchange } from \"urql\";\r\nimport { cacheExchange } from \"@urql/exchange-graphcache\";\r\nimport {\r\n  LogoutMutation,\r\n  MeQuery,\r\n  MeDocument,\r\n  LoginMutation,\r\n  RegisterMutation,\r\n} from \"../generated/graphql\";\r\nimport { betterUpdateQuery } from \"./betterUpdateQuery\";\r\nimport { pipe, tap } from \"wonka\";\r\nimport Router from \"next/router\";\r\n\r\nconst errorExchange: Exchange = ({ forward }) => (ops$) => {\r\n  return pipe(\r\n    forward(ops$),\r\n    tap(({ error }) => {\r\n      if (error?.message.includes(\"not authenticated\")) {\r\n        Router.replace(\"/login\");\r\n      }\r\n    })\r\n  );\r\n};\r\n\r\nexport const createUrqlClient = (ssrExchange: any) => ({\r\n  url: \"http://localhost:4000/graphql\",\r\n  fetchOptions: {\r\n    credentials: \"include\" as const,\r\n  },\r\n  exchanges: [\r\n    dedupExchange,\r\n    cacheExchange({\r\n      updates: {\r\n        Mutation: {\r\n          logout: (_result, args, cache, info) => {\r\n            betterUpdateQuery<LogoutMutation, MeQuery>(\r\n              cache,\r\n              { query: MeDocument },\r\n              _result,\r\n              () => ({ me: null })\r\n            );\r\n          },\r\n          login: (_result, args, cache, info) => {\r\n            betterUpdateQuery<LoginMutation, MeQuery>(\r\n              cache,\r\n              { query: MeDocument },\r\n              _result,\r\n              (result, query) => {\r\n                if (result.login.errors) {\r\n                  return query;\r\n                } else {\r\n                  return {\r\n                    me: result.login.user,\r\n                  };\r\n                }\r\n              }\r\n            );\r\n          },\r\n          register: (_result, args, cache, info) => {\r\n            betterUpdateQuery<RegisterMutation, MeQuery>(\r\n              cache,\r\n              { query: MeDocument },\r\n              _result,\r\n              (result, query) => {\r\n                if (result.register.errors) {\r\n                  return query;\r\n                } else {\r\n                  return {\r\n                    me: result.register.user,\r\n                  };\r\n                }\r\n              }\r\n            );\r\n          },\r\n        },\r\n      },\r\n    }),\r\n    ssrExchange,\r\n    fetchExchange,\r\n  ],\r\n});\r\n"]},"metadata":{},"sourceType":"module"}