{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\FullstackReact\\\\lireddit-web\\\\src\\\\pages\\\\post\\\\edit\\\\[id].tsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Box, Button } from \"@chakra-ui/core\";\nimport { Formik, Form } from \"formik\";\nimport { withUrqlClient } from \"next-urql\";\nimport { useRouter } from \"next/router\";\nimport React from \"react\";\nimport { InputField } from \"../../../components/InputField\";\nimport { Layout } from \"../../../components/Layout\";\nimport { usePostQuery, useUpdatePostMutation } from \"../../../generated/graphql\";\nimport { createUrqlClient } from \"../../../utils/createUrqlClient\";\nimport { useGetIntId } from \"../../../utils/useGetIntId\";\n\nconst EditPost = ({}) => {\n  const router = useRouter();\n  const intId = useGetIntId();\n  const [{\n    data,\n    error,\n    fetching\n  }] = usePostQuery({\n    pause: intId === -1,\n    variables: {\n      id: intId\n    }\n  });\n  const [, updatePost] = useUpdatePostMutation();\n\n  if (fetching) {\n    return __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }\n    }, \"Loading...\"));\n  }\n\n  if (error) {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 12\n      }\n    }, error.message);\n  }\n\n  if (!(data === null || data === void 0 ? void 0 : data.post)) {\n    return __jsx(Layout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }\n    }, __jsx(Box, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }\n    }, \"Could not find post\"));\n  }\n\n  return __jsx(Layout, {\n    variant: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, __jsx(Formik, {\n    initialValues: {\n      title: data.post.title,\n      text: data.post.text\n    },\n    onSubmit: async values => {\n      //   const { error } = await createPost({ input: values });\n      //   if (!error) {\n      //     router.push(\"/\");\n      //   }\n      await updatePost(_objectSpread({\n        id: intId\n      }, values));\n      router.back();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, ({\n    isSubmitting\n  }) => __jsx(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }, __jsx(InputField, {\n    name: \"title\",\n    placeholder: \"title\",\n    label: \"Title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }), __jsx(Box, {\n    mt: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, __jsx(InputField, {\n    textarea: true,\n    name: \"text\",\n    placeholder: \"text...\",\n    label: \"Body\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 15\n    }\n  })), __jsx(Button, {\n    mt: 4,\n    type: \"submit\",\n    isLoading: isSubmitting,\n    variantColor: \"teal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, \"Update Post\"))));\n};\n\nexport default withUrqlClient(createUrqlClient)(EditPost);","map":{"version":3,"sources":["C:/Users/User/FullstackReact/lireddit-web/src/pages/post/edit/[id].tsx"],"names":["Box","Button","Formik","Form","withUrqlClient","useRouter","React","InputField","Layout","usePostQuery","useUpdatePostMutation","createUrqlClient","useGetIntId","EditPost","router","intId","data","error","fetching","pause","variables","id","updatePost","message","post","title","text","values","back","isSubmitting"],"mappings":"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","sourcesContent":["import { Box, Button } from \"@chakra-ui/core\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { withUrqlClient } from \"next-urql\";\r\nimport { useRouter } from \"next/router\";\r\nimport React from \"react\";\r\nimport { InputField } from \"../../../components/InputField\";\r\nimport { Layout } from \"../../../components/Layout\";\r\nimport {\r\n  usePostQuery,\r\n  useUpdatePostMutation,\r\n} from \"../../../generated/graphql\";\r\nimport { createUrqlClient } from \"../../../utils/createUrqlClient\";\r\nimport { useGetIntId } from \"../../../utils/useGetIntId\";\r\nimport { useGetPostFromUrl } from \"../../../utils/useGetPostFromUrl\";\r\n\r\nconst EditPost = ({}) => {\r\n  const router = useRouter();\r\n  const intId = useGetIntId();\r\n  const [{ data, error, fetching }] = usePostQuery({\r\n    pause: intId === -1,\r\n    variables: {\r\n      id: intId,\r\n    },\r\n  });\r\n  const [, updatePost] = useUpdatePostMutation();\r\n  if (fetching) {\r\n    return (\r\n      <Layout>\r\n        <div>Loading...</div>\r\n      </Layout>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <div>{error.message}</div>;\r\n  }\r\n\r\n  if (!data?.post) {\r\n    return (\r\n      <Layout>\r\n        <Box>Could not find post</Box>\r\n      </Layout>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Layout variant=\"small\">\r\n      <Formik\r\n        initialValues={{ title: data.post.title, text: data.post.text }}\r\n        onSubmit={async (values) => {\r\n          //   const { error } = await createPost({ input: values });\r\n          //   if (!error) {\r\n          //     router.push(\"/\");\r\n          //   }\r\n          await updatePost({ id: intId, ...values });\r\n          router.back();\r\n        }}\r\n      >\r\n        {({ isSubmitting }) => (\r\n          <Form>\r\n            <InputField name=\"title\" placeholder=\"title\" label=\"Title\" />\r\n            <Box mt={4}>\r\n              <InputField\r\n                textarea\r\n                name=\"text\"\r\n                placeholder=\"text...\"\r\n                label=\"Body\"\r\n              />\r\n            </Box>\r\n\r\n            <Button\r\n              mt={4}\r\n              type=\"submit\"\r\n              isLoading={isSubmitting}\r\n              variantColor=\"teal\"\r\n            >\r\n              Update Post\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default withUrqlClient(createUrqlClient)(EditPost);\r\n"]},"metadata":{},"sourceType":"module"}