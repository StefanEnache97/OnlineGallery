{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n                  fragment _ on Post {\\n                    points\\n                  }\\n                \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n                fragment _ on Post {\\n                  id\\n                  points\\n                }\\n              \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { dedupExchange, fetchExchange, stringifyVariables } from \"urql\";\nimport { cacheExchange } from \"@urql/exchange-graphcache\";\nimport { MeDocument } from \"../generated/graphql\";\nimport gql from \"graphql-tag\";\nimport { betterUpdateQuery } from \"./betterUpdateQuery\";\nimport { pipe, tap } from \"wonka\";\nimport Router from \"next/router\";\n\nvar errorExchange = function errorExchange(_ref) {\n  var forward = _ref.forward;\n  return function (ops$) {\n    return pipe(forward(ops$), tap(function (_ref2) {\n      var error = _ref2.error;\n\n      if (error === null || error === void 0 ? void 0 : error.message.includes(\"not authenticated\")) {\n        Router.replace(\"/login\");\n      }\n    }));\n  };\n};\n\nvar cursorPagination = function cursorPagination() {\n  return function (_parent, fieldArgs, cache, info) {\n    var entityKey = info.parentKey,\n        fieldName = info.fieldName;\n    var allFields = cache.inspectFields(entityKey);\n    var fieldInfos = allFields.filter(function (info) {\n      return info.fieldName === fieldName;\n    });\n    var size = fieldInfos.length;\n\n    if (size === 0) {\n      return undefined;\n    }\n\n    console.log(\"entity key:\", entityKey);\n    var fieldKey = \"\".concat(fieldName, \"(\").concat(stringifyVariables(fieldArgs), \")\");\n    console.log(\"fieldKey:\", fieldKey);\n    var isItInTheCache = cache.resolve(cache.resolveFieldByKey(entityKey, fieldKey), \"posts\");\n    console.log(\"resolveFieldByKey:\", cache.resolveFieldByKey(entityKey, fieldKey));\n    info.partial = !isItInTheCache;\n    console.log(\"info partial:\", info.partial);\n    var hasMore = true;\n    var results = [];\n    fieldInfos.forEach(function (fi) {\n      var key = cache.resolveFieldByKey(entityKey, fi.fieldKey);\n      var data = cache.resolve(key, \"posts\");\n\n      var _hasMore = cache.resolve(key, \"hasMore\");\n\n      if (!_hasMore) {\n        hasMore = _hasMore;\n      }\n\n      results.push.apply(results, _toConsumableArray(data));\n    });\n    return {\n      __typename: \"PaginatedPosts\",\n      hasMore: hasMore,\n      posts: results\n    }; // const visited = new Set();\n    // let result: NullArray<string> = [];\n    // let prevOffset: number | null = null;\n    // for (let i = 0; i < size; i++) {\n    //   const { fieldKey, arguments: args } = fieldInfos[i];\n    //   if (args === null || !compareArgs(fieldArgs, args)) {\n    //     continue;\n    //   }\n    //   const links = cache.resolveFieldByKey(entityKey, fieldKey) as string[];\n    //   const currentOffset = args[cursorArgument];\n    //   if (\n    //     links === null ||\n    //     links.length === 0 ||\n    //     typeof currentOffset !== 'number'\n    //   ) {\n    //     continue;\n    //   }\n    //   if (!prevOffset || currentOffset > prevOffset) {\n    //     for (let j = 0; j < links.length; j++) {\n    //       const link = links[j];\n    //       if (visited.has(link)) continue;\n    //       result.push(link);\n    //       visited.add(link);\n    //     }\n    //   } else {\n    //     const tempResult: NullArray<string> = [];\n    //     for (let j = 0; j < links.length; j++) {\n    //       const link = links[j];\n    //       if (visited.has(link)) continue;\n    //       tempResult.push(link);\n    //       visited.add(link);\n    //     }\n    //     result = [...tempResult, ...result];\n    //   }\n    //   prevOffset = currentOffset;\n    // }\n    // const hasCurrentPage = cache.resolve(entityKey, fieldName, fieldArgs);\n    // if (hasCurrentPage) {\n    //   return result;\n    // } else if (!(info as any).store.schema) {\n    //   return undefined;\n    // } else {\n    //   info.partial = true;\n    //   return result;\n    // }\n  };\n};\n\nexport var createUrqlClient = function createUrqlClient(ssrExchange) {\n  return {\n    url: \"http://localhost:4000/graphql\",\n    fetchOptions: {\n      credentials: \"include\"\n    },\n    exchanges: [dedupExchange, cacheExchange({\n      keys: {\n        PaginatedPosts: function PaginatedPosts() {\n          return null;\n        }\n      },\n      resolvers: {\n        Query: {\n          posts: cursorPagination()\n        }\n      },\n      updates: {\n        Mutation: {\n          vote: function vote(_result, args, cache, info) {\n            var _ref3 = args,\n                postId = _ref3.postId,\n                value = _ref3.value;\n            var data = cache.readFragment(gql(_templateObject()), {\n              id: postId\n            });\n\n            if (data) {\n              var newPoints = data.points + value;\n              cache.writeFragment(gql(_templateObject2()), {\n                id: postId,\n                points: newPoints\n              });\n            }\n          },\n          createPost: function createPost(_result, args, cache, info) {\n            var allFields = cache.inspectFields(\"Query\");\n            var fieldInfos = allFields.filter(function (info) {\n              return info.fieldName === \"posts\";\n            });\n            fieldInfos.forEach(function (fi) {\n              cache.invalidate(\"Query\", \"posts\", fi.arguments || {});\n            });\n          },\n          logout: function logout(_result, args, cache, info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function () {\n              return {\n                me: null\n              };\n            });\n          },\n          login: function login(_result, args, cache, info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function (result, query) {\n              if (result.login.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.login.user\n                };\n              }\n            });\n          },\n          register: function register(_result, args, cache, info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function (result, query) {\n              if (result.register.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.register.user\n                };\n              }\n            });\n          }\n        }\n      }\n    }), errorExchange, ssrExchange, fetchExchange]\n  };\n};","map":{"version":3,"sources":["C:/Users/User/FullstackReact/lireddit-web/src/utils/createUrqlClient.ts"],"names":["dedupExchange","fetchExchange","stringifyVariables","cacheExchange","MeDocument","gql","betterUpdateQuery","pipe","tap","Router","errorExchange","forward","ops$","error","message","includes","replace","cursorPagination","_parent","fieldArgs","cache","info","entityKey","parentKey","fieldName","allFields","inspectFields","fieldInfos","filter","size","length","undefined","console","log","fieldKey","isItInTheCache","resolve","resolveFieldByKey","partial","hasMore","results","forEach","fi","key","data","_hasMore","push","__typename","posts","createUrqlClient","ssrExchange","url","fetchOptions","credentials","exchanges","keys","PaginatedPosts","resolvers","Query","updates","Mutation","vote","_result","args","postId","value","readFragment","id","newPoints","points","writeFragment","createPost","invalidate","arguments","logout","query","me","login","result","errors","user","register"],"mappings":"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","sourcesContent":["import {\r\n  dedupExchange,\r\n  Exchange,\r\n  fetchExchange,\r\n  stringifyVariables,\r\n} from \"urql\";\r\nimport { cacheExchange, Resolver } from \"@urql/exchange-graphcache\";\r\nimport {\r\n  LogoutMutation,\r\n  MeQuery,\r\n  MeDocument,\r\n  LoginMutation,\r\n  RegisterMutation,\r\n  VoteMutationVariables,\r\n} from \"../generated/graphql\";\r\nimport gql from \"graphql-tag\";\r\nimport { betterUpdateQuery } from \"./betterUpdateQuery\";\r\nimport { pipe, tap } from \"wonka\";\r\nimport Router from \"next/router\";\r\n\r\nconst errorExchange: Exchange = ({ forward }) => (ops$) => {\r\n  return pipe(\r\n    forward(ops$),\r\n    tap(({ error }) => {\r\n      if (error?.message.includes(\"not authenticated\")) {\r\n        Router.replace(\"/login\");\r\n      }\r\n    })\r\n  );\r\n};\r\n\r\nconst cursorPagination = (): Resolver => {\r\n  return (_parent, fieldArgs, cache, info) => {\r\n    const { parentKey: entityKey, fieldName } = info;\r\n\r\n    const allFields = cache.inspectFields(entityKey);\r\n    const fieldInfos = allFields.filter((info) => info.fieldName === fieldName);\r\n    const size = fieldInfos.length;\r\n    if (size === 0) {\r\n      return undefined;\r\n    }\r\n\r\n    console.log(\"entity key:\", entityKey);\r\n\r\n    const fieldKey = `${fieldName}(${stringifyVariables(fieldArgs)})`;\r\n    console.log(\"fieldKey:\", fieldKey);\r\n    const isItInTheCache = cache.resolve(\r\n      cache.resolveFieldByKey(entityKey, fieldKey) as string,\r\n      \"posts\"\r\n    );\r\n    console.log(\r\n      \"resolveFieldByKey:\",\r\n      cache.resolveFieldByKey(entityKey, fieldKey)\r\n    );\r\n\r\n    info.partial = !isItInTheCache;\r\n    console.log(\"info partial:\", info.partial);\r\n    let hasMore = true;\r\n    const results: string[] = [];\r\n    fieldInfos.forEach((fi) => {\r\n      const key = cache.resolveFieldByKey(entityKey, fi.fieldKey) as string;\r\n      const data = cache.resolve(key, \"posts\") as string[];\r\n      const _hasMore = cache.resolve(key, \"hasMore\");\r\n      if (!_hasMore) {\r\n        hasMore = _hasMore as boolean;\r\n      }\r\n      results.push(...data);\r\n    });\r\n\r\n    return {\r\n      __typename: \"PaginatedPosts\",\r\n      hasMore,\r\n      posts: results,\r\n    };\r\n\r\n    // const visited = new Set();\r\n    // let result: NullArray<string> = [];\r\n    // let prevOffset: number | null = null;\r\n\r\n    // for (let i = 0; i < size; i++) {\r\n    //   const { fieldKey, arguments: args } = fieldInfos[i];\r\n    //   if (args === null || !compareArgs(fieldArgs, args)) {\r\n    //     continue;\r\n    //   }\r\n\r\n    //   const links = cache.resolveFieldByKey(entityKey, fieldKey) as string[];\r\n    //   const currentOffset = args[cursorArgument];\r\n\r\n    //   if (\r\n    //     links === null ||\r\n    //     links.length === 0 ||\r\n    //     typeof currentOffset !== 'number'\r\n    //   ) {\r\n    //     continue;\r\n    //   }\r\n\r\n    //   if (!prevOffset || currentOffset > prevOffset) {\r\n    //     for (let j = 0; j < links.length; j++) {\r\n    //       const link = links[j];\r\n    //       if (visited.has(link)) continue;\r\n    //       result.push(link);\r\n    //       visited.add(link);\r\n    //     }\r\n    //   } else {\r\n    //     const tempResult: NullArray<string> = [];\r\n    //     for (let j = 0; j < links.length; j++) {\r\n    //       const link = links[j];\r\n    //       if (visited.has(link)) continue;\r\n    //       tempResult.push(link);\r\n    //       visited.add(link);\r\n    //     }\r\n    //     result = [...tempResult, ...result];\r\n    //   }\r\n\r\n    //   prevOffset = currentOffset;\r\n    // }\r\n\r\n    // const hasCurrentPage = cache.resolve(entityKey, fieldName, fieldArgs);\r\n    // if (hasCurrentPage) {\r\n    //   return result;\r\n    // } else if (!(info as any).store.schema) {\r\n    //   return undefined;\r\n    // } else {\r\n    //   info.partial = true;\r\n    //   return result;\r\n    // }\r\n  };\r\n};\r\n\r\nexport const createUrqlClient = (ssrExchange: any) => ({\r\n  url: \"http://localhost:4000/graphql\",\r\n  fetchOptions: {\r\n    credentials: \"include\" as const,\r\n  },\r\n  exchanges: [\r\n    dedupExchange,\r\n    cacheExchange({\r\n      keys: {\r\n        PaginatedPosts: () => null,\r\n      },\r\n      resolvers: {\r\n        Query: {\r\n          posts: cursorPagination(),\r\n        },\r\n      },\r\n      updates: {\r\n        Mutation: {\r\n          vote: (_result, args, cache, info) => {\r\n            const { postId, value } = args as VoteMutationVariables;\r\n            const data = cache.readFragment(\r\n              gql`\r\n                fragment _ on Post {\r\n                  id\r\n                  points\r\n                }\r\n              `,\r\n              { id: postId } as any\r\n            );\r\n            if (data) {\r\n              const newPoints = (data.points as number) + value;\r\n              cache.writeFragment(\r\n                gql`\r\n                  fragment _ on Post {\r\n                    points\r\n                  }\r\n                `,\r\n                { id: postId, points: newPoints } as any\r\n              );\r\n            }\r\n          },\r\n\r\n          createPost: (_result, args, cache, info) => {\r\n            const allFields = cache.inspectFields(\"Query\");\r\n            const fieldInfos = allFields.filter(\r\n              (info) => info.fieldName === \"posts\"\r\n            );\r\n            fieldInfos.forEach((fi) => {\r\n              cache.invalidate(\"Query\", \"posts\", fi.arguments || {});\r\n            });\r\n          },\r\n          logout: (_result, args, cache, info) => {\r\n            betterUpdateQuery<LogoutMutation, MeQuery>(\r\n              cache,\r\n              { query: MeDocument },\r\n              _result,\r\n              () => ({ me: null })\r\n            );\r\n          },\r\n          login: (_result, args, cache, info) => {\r\n            betterUpdateQuery<LoginMutation, MeQuery>(\r\n              cache,\r\n              { query: MeDocument },\r\n              _result,\r\n              (result, query) => {\r\n                if (result.login.errors) {\r\n                  return query;\r\n                } else {\r\n                  return {\r\n                    me: result.login.user,\r\n                  };\r\n                }\r\n              }\r\n            );\r\n          },\r\n          register: (_result, args, cache, info) => {\r\n            betterUpdateQuery<RegisterMutation, MeQuery>(\r\n              cache,\r\n              { query: MeDocument },\r\n              _result,\r\n              (result, query) => {\r\n                if (result.register.errors) {\r\n                  return query;\r\n                } else {\r\n                  return {\r\n                    me: result.register.user,\r\n                  };\r\n                }\r\n              }\r\n            );\r\n          },\r\n        },\r\n      },\r\n    }),\r\n    errorExchange,\r\n    ssrExchange,\r\n    fetchExchange,\r\n  ],\r\n});\r\n"]},"metadata":{},"sourceType":"module"}