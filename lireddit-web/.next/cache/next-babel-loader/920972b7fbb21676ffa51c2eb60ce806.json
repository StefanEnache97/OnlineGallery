{"ast":null,"code":"import { dedupExchange, fetchExchange, stringifyVariables } from \"urql\";\nimport { cacheExchange } from \"@urql/exchange-graphcache\";\nimport { MeDocument } from \"../generated/graphql\";\nimport gql from \"graphql-tag\";\nimport { betterUpdateQuery } from \"./betterUpdateQuery\";\nimport { pipe, tap } from \"wonka\";\nimport Router from \"next/router\";\nimport { isServer } from \"./isServer\";\n\nconst errorExchange = ({\n  forward\n}) => ops$ => {\n  return pipe(forward(ops$), tap(({\n    error\n  }) => {\n    if (error === null || error === void 0 ? void 0 : error.message.includes(\"not authenticated\")) {\n      Router.replace(\"/login\");\n    }\n  }));\n};\n\nconst cursorPagination = () => {\n  return (_parent, fieldArgs, cache, info) => {\n    const {\n      parentKey: entityKey,\n      fieldName\n    } = info;\n    const allFields = cache.inspectFields(entityKey);\n    const fieldInfos = allFields.filter(info => info.fieldName === fieldName);\n    const size = fieldInfos.length;\n\n    if (size === 0) {\n      return undefined;\n    }\n\n    const fieldKey = `${fieldName}(${stringifyVariables(fieldArgs)})`;\n    const isItInTheCache = cache.resolve(cache.resolveFieldByKey(entityKey, fieldKey), \"posts\");\n    info.partial = !isItInTheCache;\n    let hasMore = true;\n    const results = [];\n    fieldInfos.forEach(fi => {\n      const key = cache.resolveFieldByKey(entityKey, fi.fieldKey);\n      const data = cache.resolve(key, \"posts\");\n\n      const _hasMore = cache.resolve(key, \"hasMore\");\n\n      if (!_hasMore) {\n        hasMore = _hasMore;\n      }\n\n      results.push(...data);\n    });\n    console.log(\"results:\", results);\n    return {\n      __typename: \"PaginatedPosts\",\n      hasMore,\n      posts: results\n    };\n  };\n};\n\nfunction invalidateAllPosts(cache) {\n  const allFields = cache.inspectFields(\"Query\");\n  const fieldInfos = allFields.filter(info => info.fieldName === \"posts\");\n  fieldInfos.forEach(fi => {\n    cache.invalidate(\"Query\", \"posts\", fi.arguments || {});\n  });\n}\n\nexport const createUrqlClient = (ssrExchange, ctx) => {\n  let cookie = \"\";\n\n  if (isServer()) {\n    var _ctx$req, _ctx$req$headers;\n\n    console.log(\"We are server side rendering\");\n    cookie = ctx === null || ctx === void 0 ? void 0 : (_ctx$req = ctx.req) === null || _ctx$req === void 0 ? void 0 : (_ctx$req$headers = _ctx$req.headers) === null || _ctx$req$headers === void 0 ? void 0 : _ctx$req$headers.cookie;\n  }\n\n  return {\n    url: \"http://localhost:4000/graphql\",\n    fetchOptions: {\n      credentials: \"include\",\n      headers: cookie ? {\n        cookie\n      } : undefined\n    },\n    exchanges: [dedupExchange, cacheExchange({\n      keys: {\n        PaginatedPosts: () => null\n      },\n      resolvers: {\n        Query: {\n          posts: cursorPagination() // post: voteStatusPost(),\n\n        }\n      },\n      updates: {\n        Mutation: {\n          deletePost: (_result, args, cache, info) => {\n            cache.invalidate({\n              __typename: \"Post\",\n              id: args.id\n            });\n          },\n          vote: (_result, args, cache, info) => {\n            const {\n              postId,\n              value\n            } = args;\n            const data = cache.readFragment(gql`\n                  fragment _ on Post {\n                    id\n                    points\n                    voteStatus\n                  }\n                `, {\n              id: postId\n            });\n            console.log(data);\n\n            if (data) {\n              if (data.voteStatus === value) {\n                return;\n              }\n\n              const newPoints = data.points + (!data.voteStatus ? 1 : 2) * value;\n              cache.writeFragment(gql`\n                    fragment __ on Post {\n                      points\n                      voteStatus\n                    }\n                  `, {\n                id: postId,\n                points: newPoints,\n                voteStatus: value\n              });\n            }\n          },\n          createPost: (_result, args, cache, info) => {\n            invalidateAllPosts(cache);\n          },\n          logout: (_result, args, cache, info) => {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, () => ({\n              me: null\n            }));\n          },\n          login: (_result, args, cache, info) => {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, (result, query) => {\n              if (result.login.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.login.user\n                };\n              }\n            });\n            invalidateAllPosts(cache);\n          },\n          register: (_result, args, cache, info) => {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, (result, query) => {\n              if (result.register.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.register.user\n                };\n              }\n            });\n          }\n        }\n      }\n    }), errorExchange, ssrExchange, fetchExchange]\n  };\n};","map":{"version":3,"sources":["C:/Users/User/FullstackReact/lireddit-web/src/utils/createUrqlClient.ts"],"names":["dedupExchange","fetchExchange","stringifyVariables","cacheExchange","MeDocument","gql","betterUpdateQuery","pipe","tap","Router","isServer","errorExchange","forward","ops$","error","message","includes","replace","cursorPagination","_parent","fieldArgs","cache","info","parentKey","entityKey","fieldName","allFields","inspectFields","fieldInfos","filter","size","length","undefined","fieldKey","isItInTheCache","resolve","resolveFieldByKey","partial","hasMore","results","forEach","fi","key","data","_hasMore","push","console","log","__typename","posts","invalidateAllPosts","invalidate","arguments","createUrqlClient","ssrExchange","ctx","cookie","req","headers","url","fetchOptions","credentials","exchanges","keys","PaginatedPosts","resolvers","Query","updates","Mutation","deletePost","_result","args","id","vote","postId","value","readFragment","voteStatus","newPoints","points","writeFragment","createPost","logout","query","me","login","result","errors","user","register"],"mappings":"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","sourcesContent":["import {\r\n  dedupExchange,\r\n  Exchange,\r\n  fetchExchange,\r\n  stringifyVariables,\r\n} from \"urql\";\r\nimport { cacheExchange, Resolver, Cache } from \"@urql/exchange-graphcache\";\r\nimport {\r\n  LogoutMutation,\r\n  MeQuery,\r\n  MeDocument,\r\n  LoginMutation,\r\n  RegisterMutation,\r\n  VoteMutationVariables,\r\n  DeletePostMutationVariables,\r\n} from \"../generated/graphql\";\r\nimport gql from \"graphql-tag\";\r\nimport { betterUpdateQuery } from \"./betterUpdateQuery\";\r\nimport { pipe, tap } from \"wonka\";\r\nimport Router from \"next/router\";\r\nimport { isServer } from \"./isServer\";\r\n\r\nconst errorExchange: Exchange = ({ forward }) => (ops$) => {\r\n  return pipe(\r\n    forward(ops$),\r\n    tap(({ error }) => {\r\n      if (error?.message.includes(\"not authenticated\")) {\r\n        Router.replace(\"/login\");\r\n      }\r\n    })\r\n  );\r\n};\r\n\r\nconst cursorPagination = (): Resolver => {\r\n  return (_parent, fieldArgs, cache, info) => {\r\n    const { parentKey: entityKey, fieldName } = info;\r\n\r\n    const allFields = cache.inspectFields(entityKey);\r\n    const fieldInfos = allFields.filter((info) => info.fieldName === fieldName);\r\n    const size = fieldInfos.length;\r\n    if (size === 0) {\r\n      return undefined;\r\n    }\r\n\r\n    const fieldKey = `${fieldName}(${stringifyVariables(fieldArgs)})`;\r\n    const isItInTheCache = cache.resolve(\r\n      cache.resolveFieldByKey(entityKey, fieldKey) as string,\r\n      \"posts\"\r\n    );\r\n\r\n    info.partial = !isItInTheCache;\r\n\r\n    let hasMore = true;\r\n    const results: string[] = [];\r\n    fieldInfos.forEach((fi) => {\r\n      const key = cache.resolveFieldByKey(entityKey, fi.fieldKey) as string;\r\n      const data = cache.resolve(key, \"posts\") as string[];\r\n\r\n      const _hasMore = cache.resolve(key, \"hasMore\");\r\n      if (!_hasMore) {\r\n        hasMore = _hasMore as boolean;\r\n      }\r\n      results.push(...data);\r\n    });\r\n\r\n    console.log(\"results:\", results);\r\n    return {\r\n      __typename: \"PaginatedPosts\",\r\n      hasMore,\r\n      posts: results,\r\n    };\r\n  };\r\n};\r\n\r\nfunction invalidateAllPosts(cache: Cache) {\r\n  const allFields = cache.inspectFields(\"Query\");\r\n  const fieldInfos = allFields.filter((info) => info.fieldName === \"posts\");\r\n  fieldInfos.forEach((fi) => {\r\n    cache.invalidate(\"Query\", \"posts\", fi.arguments || {});\r\n  });\r\n}\r\n\r\nexport const createUrqlClient = (ssrExchange: any, ctx: any) => {\r\n  let cookie = \"\";\r\n  if (isServer()) {\r\n    console.log(\"We are server side rendering\");\r\n    cookie = ctx?.req?.headers?.cookie;\r\n  }\r\n  return {\r\n    url: \"http://localhost:4000/graphql\",\r\n    fetchOptions: {\r\n      credentials: \"include\" as const,\r\n      headers: cookie\r\n        ? {\r\n            cookie,\r\n          }\r\n        : undefined,\r\n    },\r\n    exchanges: [\r\n      dedupExchange,\r\n      cacheExchange({\r\n        keys: {\r\n          PaginatedPosts: () => null,\r\n        },\r\n        resolvers: {\r\n          Query: {\r\n            posts: cursorPagination(),\r\n            // post: voteStatusPost(),\r\n          },\r\n        },\r\n        updates: {\r\n          Mutation: {\r\n            deletePost: (_result, args, cache, info) => {\r\n              cache.invalidate({\r\n                __typename: \"Post\",\r\n                id: (args as DeletePostMutationVariables).id,\r\n              });\r\n            },\r\n            vote: (_result, args, cache, info) => {\r\n              const { postId, value } = args as VoteMutationVariables;\r\n              const data = cache.readFragment(\r\n                gql`\r\n                  fragment _ on Post {\r\n                    id\r\n                    points\r\n                    voteStatus\r\n                  }\r\n                `,\r\n                { id: postId } as any\r\n              );\r\n              console.log(data);\r\n              if (data) {\r\n                if (data.voteStatus === value) {\r\n                  return;\r\n                }\r\n                const newPoints =\r\n                  (data.points as number) + (!data.voteStatus ? 1 : 2) * value;\r\n                cache.writeFragment(\r\n                  gql`\r\n                    fragment __ on Post {\r\n                      points\r\n                      voteStatus\r\n                    }\r\n                  `,\r\n                  { id: postId, points: newPoints, voteStatus: value } as any\r\n                );\r\n              }\r\n            },\r\n\r\n            createPost: (_result, args, cache, info) => {\r\n              invalidateAllPosts(cache);\r\n            },\r\n            logout: (_result, args, cache, info) => {\r\n              betterUpdateQuery<LogoutMutation, MeQuery>(\r\n                cache,\r\n                { query: MeDocument },\r\n                _result,\r\n                () => ({ me: null })\r\n              );\r\n            },\r\n            login: (_result, args, cache, info) => {\r\n              betterUpdateQuery<LoginMutation, MeQuery>(\r\n                cache,\r\n                { query: MeDocument },\r\n                _result,\r\n                (result, query) => {\r\n                  if (result.login.errors) {\r\n                    return query;\r\n                  } else {\r\n                    return {\r\n                      me: result.login.user,\r\n                    };\r\n                  }\r\n                }\r\n              );\r\n              invalidateAllPosts(cache);\r\n            },\r\n            register: (_result, args, cache, info) => {\r\n              betterUpdateQuery<RegisterMutation, MeQuery>(\r\n                cache,\r\n                { query: MeDocument },\r\n                _result,\r\n                (result, query) => {\r\n                  if (result.register.errors) {\r\n                    return query;\r\n                  } else {\r\n                    return {\r\n                      me: result.register.user,\r\n                    };\r\n                  }\r\n                }\r\n              );\r\n            },\r\n          },\r\n        },\r\n      }),\r\n      errorExchange,\r\n      ssrExchange,\r\n      fetchExchange,\r\n    ],\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}