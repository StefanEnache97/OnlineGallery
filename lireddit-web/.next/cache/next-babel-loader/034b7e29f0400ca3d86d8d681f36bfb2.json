{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\FullstackReact\\\\lireddit-web\\\\src\\\\components\\\\InputField.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { FormControl, FormLabel, Input, FormErrorMessage } from '@chakra-ui/core';\nimport { useField } from 'formik';\nexport const InputField = (_ref) => {\n  let {\n    label,\n    size: _\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"label\", \"size\"]);\n\n  const [field, {\n    error\n  }] = useField(props);\n  return __jsx(FormControl, {\n    isInvalid: !!error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: field.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 17\n    }\n  }, label), __jsx(Input, _extends({}, field, props, {\n    id: field.name,\n    placeholder: props.placeholder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 17\n    }\n  })), error ? __jsx(FormErrorMessage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 26\n    }\n  }, error) : null);\n};","map":{"version":3,"sources":["C:/Users/User/FullstackReact/lireddit-web/src/components/InputField.tsx"],"names":["React","FormControl","FormLabel","Input","FormErrorMessage","useField","InputField","label","size","_","props","field","error","name","placeholder"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,KAAjC,EAAwCC,gBAAxC,QAAgE,iBAAhE;AACA,SAASC,QAAT,QAAyB,QAAzB;AAOA,OAAO,MAAMC,UAAqC,GAAG,UAAgC;AAAA,MAA/B;AAACC,IAAAA,KAAD;AAAQC,IAAAA,IAAI,EAAEC;AAAd,GAA+B;AAAA,MAAXC,KAAW;;AACjF,QAAM,CAACC,KAAD,EAAQ;AAACC,IAAAA;AAAD,GAAR,IAAmBP,QAAQ,CAACK,KAAD,CAAjC;AACI,SACI,MAAC,WAAD;AAAa,IAAA,SAAS,EAAE,CAAC,CAACE,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,SAAD;AAAW,IAAA,OAAO,EAAED,KAAK,CAACE,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiCN,KAAjC,CADJ,EAEI,MAAC,KAAD,eAAWI,KAAX,EAAsBD,KAAtB;AAA6B,IAAA,EAAE,EAAEC,KAAK,CAACE,IAAvC;AAA6C,IAAA,WAAW,EAAEH,KAAK,CAACI,WAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFJ,EAGKF,KAAK,GAAG,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmBA,KAAnB,CAAH,GAAkD,IAH5D,CADJ;AAOP,CATM","sourcesContent":["import React, { InputHTMLAttributes } from 'react'\r\nimport { FormControl, FormLabel, Input, FormErrorMessage } from '@chakra-ui/core';\r\nimport { useField } from 'formik';\r\n\r\ntype InputFieldProps = InputHTMLAttributes<HTMLInputElement> & {\r\n    label: string;\r\n    name: string;\r\n}\r\n\r\nexport const InputField: React.FC<InputFieldProps> = ({label, size: _, ...props}) => {\r\n    const [field, {error}] = useField(props);\r\n        return (\r\n            <FormControl isInvalid={!!error}>\r\n                <FormLabel htmlFor={field.name}>{label}</FormLabel>\r\n                <Input {...field} {...props} id={field.name} placeholder={props.placeholder} />\r\n                {error ? <FormErrorMessage>{error}</FormErrorMessage> : null}\r\n            </FormControl>\r\n        );\r\n}"]},"metadata":{},"sourceType":"module"}