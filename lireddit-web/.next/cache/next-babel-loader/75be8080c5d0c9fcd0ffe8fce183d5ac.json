{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\FullstackReact\\\\lireddit-web\\\\src\\\\pages\\\\register.tsx\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { Formik, Form } from \"formik\";\nimport { Box, Button } from \"@chakra-ui/core\";\nimport { Wrapper } from \"../components/Wrapper\";\nimport { InputField } from \"../components/InputField\";\nimport { useRegisterMutation } from \"../generated/graphql\";\nimport { toErrorMap } from \"../utils/toErrorMap\";\nimport { useRouter } from \"next/router\";\nimport { withUrqlClient } from \"next-urql\";\nimport { createUrqlClient } from \"../utils/createUrqlClient\";\nexport const Register = ({}) => {\n  const router = useRouter();\n  const [, register] = useRegisterMutation();\n  return __jsx(Wrapper, {\n    variant: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, __jsx(Formik, {\n    initialValues: {\n      email: \"\",\n      username: \"\",\n      password: \"\"\n    },\n    onSubmit: async (values, {\n      setErrors\n    }) => {\n      var _response$data, _response$data2;\n\n      const response = await register({\n        options: values\n      });\n\n      if ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.register.errors) {\n        setErrors(toErrorMap(response.data.register.errors));\n      } else if ((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.register.user) {\n        //worked\n        router.push(\"/\");\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, ({\n    isSubmitting\n  }) => __jsx(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }\n  }, __jsx(InputField, {\n    name: \"username\",\n    placeholder: \"username\",\n    label: \"Username\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }), __jsx(Box, {\n    mt: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, __jsx(InputField, {\n    name: \"email\",\n    placeholder: \"email\",\n    label: \"Email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 15\n    }\n  })), __jsx(Box, {\n    mt: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, __jsx(InputField, {\n    name: \"password\",\n    placeholder: \"password\",\n    label: \"Password\",\n    type: \"password\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 15\n    }\n  })), __jsx(Button, {\n    mt: 4,\n    type: \"submit\",\n    isLoading: isSubmitting,\n    variantColor: \"teal\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, \"register\"))));\n};\nexport default withUrqlClient(createUrqlClient)(Register);","map":{"version":3,"sources":["C:/Users/User/FullstackReact/lireddit-web/src/pages/register.tsx"],"names":["React","Formik","Form","Box","Button","Wrapper","InputField","useRegisterMutation","toErrorMap","useRouter","withUrqlClient","createUrqlClient","Register","router","register","email","username","password","values","setErrors","response","options","data","errors","user","push","isSubmitting"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  FormErrorMessage,\r\n  Box,\r\n  Button,\r\n} from \"@chakra-ui/core\";\r\nimport { Wrapper } from \"../components/Wrapper\";\r\nimport { InputField } from \"../components/InputField\";\r\nimport { useMutation } from \"urql\";\r\nimport { useRegisterMutation } from \"../generated/graphql\";\r\nimport { toErrorMap } from \"../utils/toErrorMap\";\r\nimport { useRouter } from \"next/router\";\r\nimport { withUrqlClient } from \"next-urql\";\r\nimport { createUrqlClient } from \"../utils/createUrqlClient\";\r\n\r\ninterface registerProps {}\r\n\r\nexport const Register: React.FC<registerProps> = ({}) => {\r\n  const router = useRouter();\r\n  const [, register] = useRegisterMutation();\r\n  return (\r\n    <Wrapper variant=\"small\">\r\n      <Formik\r\n        initialValues={{ email: \"\", username: \"\", password: \"\" }}\r\n        onSubmit={async (values, { setErrors }) => {\r\n          const response = await register({ options: values });\r\n          if (response.data?.register.errors) {\r\n            setErrors(toErrorMap(response.data.register.errors));\r\n          } else if (response.data?.register.user) {\r\n            //worked\r\n            router.push(\"/\");\r\n          }\r\n        }}\r\n      >\r\n        {({ isSubmitting }) => (\r\n          <Form>\r\n            <InputField\r\n              name=\"username\"\r\n              placeholder=\"username\"\r\n              label=\"Username\"\r\n            />\r\n            <Box mt={4}>\r\n              <InputField name=\"email\" placeholder=\"email\" label=\"Email\" />\r\n            </Box>\r\n            <Box mt={4}>\r\n              <InputField\r\n                name=\"password\"\r\n                placeholder=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n              />\r\n            </Box>\r\n            <Button\r\n              mt={4}\r\n              type=\"submit\"\r\n              isLoading={isSubmitting}\r\n              variantColor=\"teal\"\r\n            >\r\n              register\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default withUrqlClient(createUrqlClient)(Register);\r\n"]},"metadata":{},"sourceType":"module"}