{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\FullstackReact\\\\lireddit-web\\\\src\\\\components\\\\InputField.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport { FormControl, FormLabel, Input, FormErrorMessage, Textarea } from \"@chakra-ui/core\";\nimport { useField } from \"formik\";\nexport const InputField = (_ref) => {\n  let {\n    label,\n    textarea,\n    size: _\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"label\", \"textarea\", \"size\"]);\n\n  let InputOrTextarea = Input;\n\n  if (textarea) {\n    InputOrTextarea = Textarea;\n  }\n\n  const [field, {\n    error\n  }] = useField(props);\n  return __jsx(FormControl, {\n    isInvalid: !!error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: field.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, label), __jsx(InputOrTextarea, _extends({}, field, props, {\n    id: field.name,\n    placeholder: props.placeholder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  })), error ? __jsx(FormErrorMessage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 16\n    }\n  }, error) : null);\n};","map":{"version":3,"sources":["C:/Users/User/FullstackReact/lireddit-web/src/components/InputField.tsx"],"names":["React","FormControl","FormLabel","Input","FormErrorMessage","Textarea","useField","InputField","label","textarea","size","_","props","InputOrTextarea","field","error","name","placeholder"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAA2C,OAA3C;AACA,SACEC,WADF,EAEEC,SAFF,EAGEC,KAHF,EAIEC,gBAJF,EAKEC,QALF,QAMO,iBANP;AAOA,SAASC,QAAT,QAAyB,QAAzB;AAQA,OAAO,MAAMC,UAAqC,GAAG,UAK/C;AAAA,MALgD;AACpDC,IAAAA,KADoD;AAEpDC,IAAAA,QAFoD;AAGpDC,IAAAA,IAAI,EAAEC;AAH8C,GAKhD;AAAA,MADDC,KACC;;AACJ,MAAIC,eAAe,GAAGV,KAAtB;;AACA,MAAIM,QAAJ,EAAc;AACZI,IAAAA,eAAe,GAAGR,QAAlB;AACD;;AACD,QAAM,CAACS,KAAD,EAAQ;AAAEC,IAAAA;AAAF,GAAR,IAAqBT,QAAQ,CAACM,KAAD,CAAnC;AACA,SACE,MAAC,WAAD;AAAa,IAAA,SAAS,EAAE,CAAC,CAACG,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAW,IAAA,OAAO,EAAED,KAAK,CAACE,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiCR,KAAjC,CADF,EAEE,MAAC,eAAD,eACMM,KADN,EAEMF,KAFN;AAGE,IAAA,EAAE,EAAEE,KAAK,CAACE,IAHZ;AAIE,IAAA,WAAW,EAAEJ,KAAK,CAACK,WAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,EAQGF,KAAK,GAAG,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmBA,KAAnB,CAAH,GAAkD,IAR1D,CADF;AAYD,CAvBM","sourcesContent":["import React, { InputHTMLAttributes } from \"react\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  FormErrorMessage,\r\n  Textarea,\r\n} from \"@chakra-ui/core\";\r\nimport { useField } from \"formik\";\r\n\r\ntype InputFieldProps = InputHTMLAttributes<HTMLInputElement> & {\r\n  label: string;\r\n  name: string;\r\n  textarea?: boolean;\r\n};\r\n\r\nexport const InputField: React.FC<InputFieldProps> = ({\r\n  label,\r\n  textarea,\r\n  size: _,\r\n  ...props\r\n}) => {\r\n  let InputOrTextarea = Input;\r\n  if (textarea) {\r\n    InputOrTextarea = Textarea;\r\n  }\r\n  const [field, { error }] = useField(props);\r\n  return (\r\n    <FormControl isInvalid={!!error}>\r\n      <FormLabel htmlFor={field.name}>{label}</FormLabel>\r\n      <InputOrTextarea\r\n        {...field}\r\n        {...props}\r\n        id={field.name}\r\n        placeholder={props.placeholder}\r\n      />\r\n      {error ? <FormErrorMessage>{error}</FormErrorMessage> : null}\r\n    </FormControl>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}