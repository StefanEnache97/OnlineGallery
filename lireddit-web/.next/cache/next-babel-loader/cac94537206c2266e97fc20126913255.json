{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectDestructuringEmpty from \"@babel/runtime/helpers/esm/objectDestructuringEmpty\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\User\\\\FullstackReact\\\\lireddit-web\\\\src\\\\pages\\\\post\\\\edit\\\\[id].tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Box, Button } from \"@chakra-ui/core\";\nimport { Formik, Form } from \"formik\";\nimport { withUrqlClient } from \"next-urql\";\nimport { useRouter } from \"next/router\";\nimport React from \"react\";\nimport { InputField } from \"../../../components/InputField\";\nimport { Layout } from \"../../../components/Layout\";\nimport { usePostQuery, useUpdatePostMutation } from \"../../../generated/graphql\";\nimport { createUrqlClient } from \"../../../utils/createUrqlClient\";\nimport { useGetIntId } from \"../../../utils/useGetIntId\";\n\nvar EditPost = function EditPost(_ref) {\n  _s();\n\n  _objectDestructuringEmpty(_ref);\n\n  var router = useRouter();\n  var intId = useGetIntId();\n\n  var _usePostQuery = usePostQuery({\n    pause: intId === -1,\n    variables: {\n      id: intId\n    }\n  }),\n      _usePostQuery2 = _slicedToArray(_usePostQuery, 1),\n      _usePostQuery2$ = _usePostQuery2[0],\n      data = _usePostQuery2$.data,\n      error = _usePostQuery2$.error,\n      fetching = _usePostQuery2$.fetching;\n\n  var _useUpdatePostMutatio = useUpdatePostMutation(),\n      _useUpdatePostMutatio2 = _slicedToArray(_useUpdatePostMutatio, 2),\n      updatePost = _useUpdatePostMutatio2[1];\n\n  if (fetching) {\n    return __jsx(Layout, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }\n    }, \"Loading...\"));\n  }\n\n  if (error) {\n    return __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 12\n      }\n    }, error.message);\n  }\n\n  if (!(data === null || data === void 0 ? void 0 : data.post)) {\n    return __jsx(Layout, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }\n    }, __jsx(Box, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }\n    }, \"Could not find post\"));\n  }\n\n  return __jsx(Layout, {\n    variant: \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, __jsx(Formik, {\n    initialValues: {\n      title: data.post.title,\n      text: data.post.text\n    },\n    onSubmit: /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(values) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return updatePost(_objectSpread({\n                  id: intId\n                }, values));\n\n              case 2:\n                router.push(\"/\");\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }(),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, function (_ref3) {\n    var isSubmitting = _ref3.isSubmitting;\n    return __jsx(Form, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }\n    }, __jsx(InputField, {\n      name: \"title\",\n      placeholder: \"title\",\n      label: \"Title\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }\n    }), __jsx(Box, {\n      mt: 4,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }\n    }, __jsx(InputField, {\n      textarea: true,\n      name: \"text\",\n      placeholder: \"text...\",\n      label: \"Body\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 15\n      }\n    })), __jsx(Button, {\n      mt: 4,\n      type: \"submit\",\n      isLoading: isSubmitting,\n      variantColor: \"teal\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }, \"Update Post\"));\n  }));\n};\n\n_s(EditPost, \"855Q8FRnFoDu0e/WYo5ERQnOVTM=\", false, function () {\n  return [useRouter, useGetIntId, usePostQuery, useUpdatePostMutation];\n});\n\n_c = EditPost;\nexport default withUrqlClient(createUrqlClient)(EditPost);\n\nvar _c;\n\n$RefreshReg$(_c, \"EditPost\");","map":{"version":3,"sources":["C:/Users/User/FullstackReact/lireddit-web/src/pages/post/edit/[id].tsx"],"names":["Box","Button","Formik","Form","withUrqlClient","useRouter","React","InputField","Layout","usePostQuery","useUpdatePostMutation","createUrqlClient","useGetIntId","EditPost","router","intId","pause","variables","id","data","error","fetching","updatePost","message","post","title","text","values","push","isSubmitting"],"mappings":";;;;;;;;;;;;;;;;AAAA,SAASA,GAAT,EAAcC,MAAd,QAA4B,iBAA5B;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,QAA7B;AACA,SAASC,cAAT,QAA+B,WAA/B;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,gCAA3B;AACA,SAASC,MAAT,QAAuB,4BAAvB;AACA,SACEC,YADF,EAEEC,qBAFF,QAGO,4BAHP;AAIA,SAASC,gBAAT,QAAiC,iCAAjC;AACA,SAASC,WAAT,QAA4B,4BAA5B;;AAGA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,OAAQ;AAAA;;AAAA;;AACvB,MAAMC,MAAM,GAAGT,SAAS,EAAxB;AACA,MAAMU,KAAK,GAAGH,WAAW,EAAzB;;AAFuB,sBAGaH,YAAY,CAAC;AAC/CO,IAAAA,KAAK,EAAED,KAAK,KAAK,CAAC,CAD6B;AAE/CE,IAAAA,SAAS,EAAE;AACTC,MAAAA,EAAE,EAAEH;AADK;AAFoC,GAAD,CAHzB;AAAA;AAAA;AAAA,MAGdI,IAHc,mBAGdA,IAHc;AAAA,MAGRC,KAHQ,mBAGRA,KAHQ;AAAA,MAGDC,QAHC,mBAGDA,QAHC;;AAAA,8BASAX,qBAAqB,EATrB;AAAA;AAAA,MASdY,UATc;;AAUvB,MAAID,QAAJ,EAAc;AACZ,WACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CADF;AAKD;;AAED,MAAID,KAAJ,EAAW;AACT,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAMA,KAAK,CAACG,OAAZ,CAAP;AACD;;AAED,MAAI,EAACJ,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEK,IAAP,CAAJ,EAAiB;AACf,WACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADF,CADF;AAKD;;AAED,SACE,MAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AACE,IAAA,aAAa,EAAE;AAAEC,MAAAA,KAAK,EAAEN,IAAI,CAACK,IAAL,CAAUC,KAAnB;AAA0BC,MAAAA,IAAI,EAAEP,IAAI,CAACK,IAAL,CAAUE;AAA1C,KADjB;AAEE,IAAA,QAAQ;AAAA,2EAAE,iBAAOC,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAKFL,UAAU;AAAGJ,kBAAAA,EAAE,EAAEH;AAAP,mBAAiBY,MAAjB,EALR;;AAAA;AAMRb,gBAAAA,MAAM,CAACc,IAAP,CAAY,GAAZ;;AANQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAF;;AAAA;AAAA;AAAA;AAAA,OAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWG;AAAA,QAAGC,YAAH,SAAGA,YAAH;AAAA,WACC,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,UAAD;AAAY,MAAA,IAAI,EAAC,OAAjB;AAAyB,MAAA,WAAW,EAAC,OAArC;AAA6C,MAAA,KAAK,EAAC,OAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,MAAC,GAAD;AAAK,MAAA,EAAE,EAAE,CAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,UAAD;AACE,MAAA,QAAQ,MADV;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,WAAW,EAAC,SAHd;AAIE,MAAA,KAAK,EAAC,MAJR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAFF,EAWE,MAAC,MAAD;AACE,MAAA,EAAE,EAAE,CADN;AAEE,MAAA,IAAI,EAAC,QAFP;AAGE,MAAA,SAAS,EAAEA,YAHb;AAIE,MAAA,YAAY,EAAC,MAJf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAXF,CADD;AAAA,GAXH,CADF,CADF;AAsCD,CApED;;GAAMhB,Q;UACWR,S,EACDO,W,EACsBH,Y,EAMbC,qB;;;KATnBG,Q;AAsEN,eAAeT,cAAc,CAACO,gBAAD,CAAd,CAAiCE,QAAjC,CAAf","sourcesContent":["import { Box, Button } from \"@chakra-ui/core\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { withUrqlClient } from \"next-urql\";\r\nimport { useRouter } from \"next/router\";\r\nimport React from \"react\";\r\nimport { InputField } from \"../../../components/InputField\";\r\nimport { Layout } from \"../../../components/Layout\";\r\nimport {\r\n  usePostQuery,\r\n  useUpdatePostMutation,\r\n} from \"../../../generated/graphql\";\r\nimport { createUrqlClient } from \"../../../utils/createUrqlClient\";\r\nimport { useGetIntId } from \"../../../utils/useGetIntId\";\r\nimport { useGetPostFromUrl } from \"../../../utils/useGetPostFromUrl\";\r\n\r\nconst EditPost = ({}) => {\r\n  const router = useRouter();\r\n  const intId = useGetIntId();\r\n  const [{ data, error, fetching }] = usePostQuery({\r\n    pause: intId === -1,\r\n    variables: {\r\n      id: intId,\r\n    },\r\n  });\r\n  const [, updatePost] = useUpdatePostMutation();\r\n  if (fetching) {\r\n    return (\r\n      <Layout>\r\n        <div>Loading...</div>\r\n      </Layout>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return <div>{error.message}</div>;\r\n  }\r\n\r\n  if (!data?.post) {\r\n    return (\r\n      <Layout>\r\n        <Box>Could not find post</Box>\r\n      </Layout>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Layout variant=\"small\">\r\n      <Formik\r\n        initialValues={{ title: data.post.title, text: data.post.text }}\r\n        onSubmit={async (values) => {\r\n          //   const { error } = await createPost({ input: values });\r\n          //   if (!error) {\r\n          //     router.push(\"/\");\r\n          //   }\r\n          await updatePost({ id: intId, ...values });\r\n          router.push(\"/\");\r\n        }}\r\n      >\r\n        {({ isSubmitting }) => (\r\n          <Form>\r\n            <InputField name=\"title\" placeholder=\"title\" label=\"Title\" />\r\n            <Box mt={4}>\r\n              <InputField\r\n                textarea\r\n                name=\"text\"\r\n                placeholder=\"text...\"\r\n                label=\"Body\"\r\n              />\r\n            </Box>\r\n\r\n            <Button\r\n              mt={4}\r\n              type=\"submit\"\r\n              isLoading={isSubmitting}\r\n              variantColor=\"teal\"\r\n            >\r\n              Update Post\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default withUrqlClient(createUrqlClient)(EditPost);\r\n"]},"metadata":{},"sourceType":"module"}