{"ast":null,"code":"import { dedupExchange, fetchExchange, stringifyVariables } from \"urql\";\nimport { cacheExchange } from \"@urql/exchange-graphcache\";\nimport { MeDocument } from \"../generated/graphql\";\nimport gql from \"graphql-tag\";\nimport { betterUpdateQuery } from \"./betterUpdateQuery\";\nimport { pipe, tap } from \"wonka\";\nimport Router from \"next/router\";\nimport { isServer } from \"./isServer\";\n\nconst errorExchange = ({\n  forward\n}) => ops$ => {\n  return pipe(forward(ops$), tap(({\n    error\n  }) => {\n    if (error === null || error === void 0 ? void 0 : error.message.includes(\"not authenticated\")) {\n      Router.replace(\"/login\");\n    }\n  }));\n};\n\nconst cursorPagination = () => {\n  return (_parent, fieldArgs, cache, info) => {\n    const {\n      parentKey: entityKey,\n      fieldName\n    } = info;\n    const allFields = cache.inspectFields(entityKey);\n    const fieldInfos = allFields.filter(info => info.fieldName === fieldName);\n    const size = fieldInfos.length;\n\n    if (size === 0) {\n      return undefined;\n    }\n\n    console.log(\"entity key:\", entityKey);\n    const fieldKey = `${fieldName}(${stringifyVariables(fieldArgs)})`;\n    console.log(\"fieldKey:\", fieldKey);\n    const isItInTheCache = cache.resolve(cache.resolveFieldByKey(entityKey, fieldKey), \"posts\");\n    console.log(\"resolveFieldByKey:\", cache.resolveFieldByKey(entityKey, fieldKey));\n    info.partial = !isItInTheCache;\n    console.log(\"info partial:\", info.partial);\n    let hasMore = true;\n    const results = [];\n    fieldInfos.forEach(fi => {\n      const key = cache.resolveFieldByKey(entityKey, fi.fieldKey);\n      const data = cache.resolve(key, \"posts\");\n\n      const _hasMore = cache.resolve(key, \"hasMore\");\n\n      if (!_hasMore) {\n        hasMore = _hasMore;\n      }\n\n      results.push(...data);\n    });\n    return {\n      __typename: \"PaginatedPosts\",\n      hasMore,\n      posts: results\n    }; // const visited = new Set();\n    // let result: NullArray<string> = [];\n    // let prevOffset: number | null = null;\n    // for (let i = 0; i < size; i++) {\n    //   const { fieldKey, arguments: args } = fieldInfos[i];\n    //   if (args === null || !compareArgs(fieldArgs, args)) {\n    //     continue;\n    //   }\n    //   const links = cache.resolveFieldByKey(entityKey, fieldKey) as string[];\n    //   const currentOffset = args[cursorArgument];\n    //   if (\n    //     links === null ||\n    //     links.length === 0 ||\n    //     typeof currentOffset !== 'number'\n    //   ) {\n    //     continue;\n    //   }\n    //   if (!prevOffset || currentOffset > prevOffset) {\n    //     for (let j = 0; j < links.length; j++) {\n    //       const link = links[j];\n    //       if (visited.has(link)) continue;\n    //       result.push(link);\n    //       visited.add(link);\n    //     }\n    //   } else {\n    //     const tempResult: NullArray<string> = [];\n    //     for (let j = 0; j < links.length; j++) {\n    //       const link = links[j];\n    //       if (visited.has(link)) continue;\n    //       tempResult.push(link);\n    //       visited.add(link);\n    //     }\n    //     result = [...tempResult, ...result];\n    //   }\n    //   prevOffset = currentOffset;\n    // }\n    // const hasCurrentPage = cache.resolve(entityKey, fieldName, fieldArgs);\n    // if (hasCurrentPage) {\n    //   return result;\n    // } else if (!(info as any).store.schema) {\n    //   return undefined;\n    // } else {\n    //   info.partial = true;\n    //   return result;\n    // }\n  };\n};\n\nexport const createUrqlClient = (ssrExchange, ctx) => {\n  let cookie = \"\";\n\n  if (isServer()) {\n    console.log(\"We are server side rendering\");\n    cookie = ctx.req.headers.cookie;\n  }\n\n  return {\n    url: \"http://localhost:4000/graphql\",\n    fetchOptions: {\n      credentials: \"include\",\n      headers: cookie ? {\n        cookie\n      } : undefined\n    },\n    exchanges: [dedupExchange, cacheExchange({\n      keys: {\n        PaginatedPosts: () => null\n      },\n      resolvers: {\n        Query: {\n          posts: cursorPagination()\n        }\n      },\n      updates: {\n        Mutation: {\n          vote: (_result, args, cache, info) => {\n            console.log(\"we are searching fragments for post\");\n            const {\n              postId,\n              value\n            } = args;\n            const data = cache.readFragment(gql`\n                  fragment _ on Post {\n                    id\n                    points\n                    voteStatus\n                  }\n                `, {\n              id: postId\n            });\n            console.log(data);\n\n            if (data) {\n              if (data.voteStatus === value) {\n                console.log(\"the voteStatus is the same as the value\");\n                return;\n              }\n\n              const newPoints = data.points + (!data.voteStatus ? 1 : 2) * value;\n              cache.writeFragment(gql`\n                    fragment __ on Post {\n                      points\n                      voteStatus\n                    }\n                  `, {\n                id: postId,\n                points: newPoints,\n                voteStatus: value\n              });\n            }\n          },\n          createPost: (_result, args, cache, info) => {\n            const allFields = cache.inspectFields(\"Query\");\n            const fieldInfos = allFields.filter(info => info.fieldName === \"posts\");\n            fieldInfos.forEach(fi => {\n              cache.invalidate(\"Query\", \"posts\", fi.arguments || {});\n            });\n          },\n          logout: (_result, args, cache, info) => {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, () => ({\n              me: null\n            }));\n          },\n          login: (_result, args, cache, info) => {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, (result, query) => {\n              if (result.login.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.login.user\n                };\n              }\n            });\n          },\n          register: (_result, args, cache, info) => {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, (result, query) => {\n              if (result.register.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.register.user\n                };\n              }\n            });\n          }\n        }\n      }\n    }), errorExchange, ssrExchange, fetchExchange]\n  };\n};","map":{"version":3,"sources":["C:/Users/User/FullstackReact/lireddit-web/src/utils/createUrqlClient.ts"],"names":["dedupExchange","fetchExchange","stringifyVariables","cacheExchange","MeDocument","gql","betterUpdateQuery","pipe","tap","Router","isServer","errorExchange","forward","ops$","error","message","includes","replace","cursorPagination","_parent","fieldArgs","cache","info","parentKey","entityKey","fieldName","allFields","inspectFields","fieldInfos","filter","size","length","undefined","console","log","fieldKey","isItInTheCache","resolve","resolveFieldByKey","partial","hasMore","results","forEach","fi","key","data","_hasMore","push","__typename","posts","createUrqlClient","ssrExchange","ctx","cookie","req","headers","url","fetchOptions","credentials","exchanges","keys","PaginatedPosts","resolvers","Query","updates","Mutation","vote","_result","args","postId","value","readFragment","id","voteStatus","newPoints","points","writeFragment","createPost","invalidate","arguments","logout","query","me","login","result","errors","user","register"],"mappings":"AAAA,SACEA,aADF,EAGEC,aAHF,EAIEC,kBAJF,QAKO,MALP;AAMA,SAASC,aAAT,QAAwC,2BAAxC;AACA,SAGEC,UAHF,QAOO,sBAPP;AAQA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,OAA1B;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,SAASC,QAAT,QAAyB,YAAzB;;AAEA,MAAMC,aAAuB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkBC,IAAD,IAAU;AACzD,SAAON,IAAI,CACTK,OAAO,CAACC,IAAD,CADE,EAETL,GAAG,CAAC,CAAC;AAAEM,IAAAA;AAAF,GAAD,KAAe;AACjB,QAAIA,KAAJ,aAAIA,KAAJ,uBAAIA,KAAK,CAAEC,OAAP,CAAeC,QAAf,CAAwB,mBAAxB,CAAJ,EAAkD;AAChDP,MAAAA,MAAM,CAACQ,OAAP,CAAe,QAAf;AACD;AACF,GAJE,CAFM,CAAX;AAQD,CATD;;AAWA,MAAMC,gBAAgB,GAAG,MAAgB;AACvC,SAAO,CAACC,OAAD,EAAUC,SAAV,EAAqBC,KAArB,EAA4BC,IAA5B,KAAqC;AAC1C,UAAM;AAAEC,MAAAA,SAAS,EAAEC,SAAb;AAAwBC,MAAAA;AAAxB,QAAsCH,IAA5C;AAEA,UAAMI,SAAS,GAAGL,KAAK,CAACM,aAAN,CAAoBH,SAApB,CAAlB;AACA,UAAMI,UAAU,GAAGF,SAAS,CAACG,MAAV,CAAkBP,IAAD,IAAUA,IAAI,CAACG,SAAL,KAAmBA,SAA9C,CAAnB;AACA,UAAMK,IAAI,GAAGF,UAAU,CAACG,MAAxB;;AACA,QAAID,IAAI,KAAK,CAAb,EAAgB;AACd,aAAOE,SAAP;AACD;;AAEDC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BV,SAA3B;AAEA,UAAMW,QAAQ,GAAI,GAAEV,SAAU,IAAGvB,kBAAkB,CAACkB,SAAD,CAAY,GAA/D;AACAa,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBC,QAAzB;AACA,UAAMC,cAAc,GAAGf,KAAK,CAACgB,OAAN,CACrBhB,KAAK,CAACiB,iBAAN,CAAwBd,SAAxB,EAAmCW,QAAnC,CADqB,EAErB,OAFqB,CAAvB;AAIAF,IAAAA,OAAO,CAACC,GAAR,CACE,oBADF,EAEEb,KAAK,CAACiB,iBAAN,CAAwBd,SAAxB,EAAmCW,QAAnC,CAFF;AAKAb,IAAAA,IAAI,CAACiB,OAAL,GAAe,CAACH,cAAhB;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BZ,IAAI,CAACiB,OAAlC;AACA,QAAIC,OAAO,GAAG,IAAd;AACA,UAAMC,OAAiB,GAAG,EAA1B;AACAb,IAAAA,UAAU,CAACc,OAAX,CAAoBC,EAAD,IAAQ;AACzB,YAAMC,GAAG,GAAGvB,KAAK,CAACiB,iBAAN,CAAwBd,SAAxB,EAAmCmB,EAAE,CAACR,QAAtC,CAAZ;AACA,YAAMU,IAAI,GAAGxB,KAAK,CAACgB,OAAN,CAAcO,GAAd,EAAmB,OAAnB,CAAb;;AACA,YAAME,QAAQ,GAAGzB,KAAK,CAACgB,OAAN,CAAcO,GAAd,EAAmB,SAAnB,CAAjB;;AACA,UAAI,CAACE,QAAL,EAAe;AACbN,QAAAA,OAAO,GAAGM,QAAV;AACD;;AACDL,MAAAA,OAAO,CAACM,IAAR,CAAa,GAAGF,IAAhB;AACD,KARD;AAUA,WAAO;AACLG,MAAAA,UAAU,EAAE,gBADP;AAELR,MAAAA,OAFK;AAGLS,MAAAA,KAAK,EAAER;AAHF,KAAP,CArC0C,CA2C1C;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GA9FD;AA+FD,CAhGD;;AAkGA,OAAO,MAAMS,gBAAgB,GAAG,CAACC,WAAD,EAAmBC,GAAnB,KAAgC;AAC9D,MAAIC,MAAM,GAAG,EAAb;;AACA,MAAI3C,QAAQ,EAAZ,EAAgB;AACduB,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACAmB,IAAAA,MAAM,GAAGD,GAAG,CAACE,GAAJ,CAAQC,OAAR,CAAgBF,MAAzB;AACD;;AACD,SAAO;AACLG,IAAAA,GAAG,EAAE,+BADA;AAELC,IAAAA,YAAY,EAAE;AACZC,MAAAA,WAAW,EAAE,SADD;AAEZH,MAAAA,OAAO,EAAEF,MAAM,GACX;AACEA,QAAAA;AADF,OADW,GAIXrB;AANQ,KAFT;AAUL2B,IAAAA,SAAS,EAAE,CACT3D,aADS,EAETG,aAAa,CAAC;AACZyD,MAAAA,IAAI,EAAE;AACJC,QAAAA,cAAc,EAAE,MAAM;AADlB,OADM;AAIZC,MAAAA,SAAS,EAAE;AACTC,QAAAA,KAAK,EAAE;AACLd,UAAAA,KAAK,EAAE/B,gBAAgB;AADlB;AADE,OAJC;AASZ8C,MAAAA,OAAO,EAAE;AACPC,QAAAA,QAAQ,EAAE;AACRC,UAAAA,IAAI,EAAE,CAACC,OAAD,EAAUC,IAAV,EAAgB/C,KAAhB,EAAuBC,IAAvB,KAAgC;AACpCW,YAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ;AACA,kBAAM;AAAEmC,cAAAA,MAAF;AAAUC,cAAAA;AAAV,gBAAoBF,IAA1B;AACA,kBAAMvB,IAAI,GAAGxB,KAAK,CAACkD,YAAN,CACXlE,GAAI;;;;;;iBADO,EAQX;AAAEmE,cAAAA,EAAE,EAAEH;AAAN,aARW,CAAb;AAUApC,YAAAA,OAAO,CAACC,GAAR,CAAYW,IAAZ;;AACA,gBAAIA,IAAJ,EAAU;AACR,kBAAIA,IAAI,CAAC4B,UAAL,KAAoBH,KAAxB,EAA+B;AAC7BrC,gBAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AACA;AACD;;AACD,oBAAMwC,SAAS,GACZ7B,IAAI,CAAC8B,MAAN,GAA0B,CAAC,CAAC9B,IAAI,CAAC4B,UAAN,GAAmB,CAAnB,GAAuB,CAAxB,IAA6BH,KADzD;AAEAjD,cAAAA,KAAK,CAACuD,aAAN,CACEvE,GAAI;;;;;mBADN,EAOE;AAAEmE,gBAAAA,EAAE,EAAEH,MAAN;AAAcM,gBAAAA,MAAM,EAAED,SAAtB;AAAiCD,gBAAAA,UAAU,EAAEH;AAA7C,eAPF;AASD;AACF,WAhCO;AAkCRO,UAAAA,UAAU,EAAE,CAACV,OAAD,EAAUC,IAAV,EAAgB/C,KAAhB,EAAuBC,IAAvB,KAAgC;AAC1C,kBAAMI,SAAS,GAAGL,KAAK,CAACM,aAAN,CAAoB,OAApB,CAAlB;AACA,kBAAMC,UAAU,GAAGF,SAAS,CAACG,MAAV,CAChBP,IAAD,IAAUA,IAAI,CAACG,SAAL,KAAmB,OADZ,CAAnB;AAGAG,YAAAA,UAAU,CAACc,OAAX,CAAoBC,EAAD,IAAQ;AACzBtB,cAAAA,KAAK,CAACyD,UAAN,CAAiB,OAAjB,EAA0B,OAA1B,EAAmCnC,EAAE,CAACoC,SAAH,IAAgB,EAAnD;AACD,aAFD;AAGD,WA1CO;AA2CRC,UAAAA,MAAM,EAAE,CAACb,OAAD,EAAUC,IAAV,EAAgB/C,KAAhB,EAAuBC,IAAvB,KAAgC;AACtChB,YAAAA,iBAAiB,CACfe,KADe,EAEf;AAAE4D,cAAAA,KAAK,EAAE7E;AAAT,aAFe,EAGf+D,OAHe,EAIf,OAAO;AAAEe,cAAAA,EAAE,EAAE;AAAN,aAAP,CAJe,CAAjB;AAMD,WAlDO;AAmDRC,UAAAA,KAAK,EAAE,CAAChB,OAAD,EAAUC,IAAV,EAAgB/C,KAAhB,EAAuBC,IAAvB,KAAgC;AACrChB,YAAAA,iBAAiB,CACfe,KADe,EAEf;AAAE4D,cAAAA,KAAK,EAAE7E;AAAT,aAFe,EAGf+D,OAHe,EAIf,CAACiB,MAAD,EAASH,KAAT,KAAmB;AACjB,kBAAIG,MAAM,CAACD,KAAP,CAAaE,MAAjB,EAAyB;AACvB,uBAAOJ,KAAP;AACD,eAFD,MAEO;AACL,uBAAO;AACLC,kBAAAA,EAAE,EAAEE,MAAM,CAACD,KAAP,CAAaG;AADZ,iBAAP;AAGD;AACF,aAZc,CAAjB;AAcD,WAlEO;AAmERC,UAAAA,QAAQ,EAAE,CAACpB,OAAD,EAAUC,IAAV,EAAgB/C,KAAhB,EAAuBC,IAAvB,KAAgC;AACxChB,YAAAA,iBAAiB,CACfe,KADe,EAEf;AAAE4D,cAAAA,KAAK,EAAE7E;AAAT,aAFe,EAGf+D,OAHe,EAIf,CAACiB,MAAD,EAASH,KAAT,KAAmB;AACjB,kBAAIG,MAAM,CAACG,QAAP,CAAgBF,MAApB,EAA4B;AAC1B,uBAAOJ,KAAP;AACD,eAFD,MAEO;AACL,uBAAO;AACLC,kBAAAA,EAAE,EAAEE,MAAM,CAACG,QAAP,CAAgBD;AADf,iBAAP;AAGD;AACF,aAZc,CAAjB;AAcD;AAlFO;AADH;AATG,KAAD,CAFJ,EAkGT3E,aAlGS,EAmGTwC,WAnGS,EAoGTlD,aApGS;AAVN,GAAP;AAiHD,CAvHM","sourcesContent":["import {\r\n  dedupExchange,\r\n  Exchange,\r\n  fetchExchange,\r\n  stringifyVariables,\r\n} from \"urql\";\r\nimport { cacheExchange, Resolver } from \"@urql/exchange-graphcache\";\r\nimport {\r\n  LogoutMutation,\r\n  MeQuery,\r\n  MeDocument,\r\n  LoginMutation,\r\n  RegisterMutation,\r\n  VoteMutationVariables,\r\n} from \"../generated/graphql\";\r\nimport gql from \"graphql-tag\";\r\nimport { betterUpdateQuery } from \"./betterUpdateQuery\";\r\nimport { pipe, tap } from \"wonka\";\r\nimport Router from \"next/router\";\r\nimport { isServer } from \"./isServer\";\r\n\r\nconst errorExchange: Exchange = ({ forward }) => (ops$) => {\r\n  return pipe(\r\n    forward(ops$),\r\n    tap(({ error }) => {\r\n      if (error?.message.includes(\"not authenticated\")) {\r\n        Router.replace(\"/login\");\r\n      }\r\n    })\r\n  );\r\n};\r\n\r\nconst cursorPagination = (): Resolver => {\r\n  return (_parent, fieldArgs, cache, info) => {\r\n    const { parentKey: entityKey, fieldName } = info;\r\n\r\n    const allFields = cache.inspectFields(entityKey);\r\n    const fieldInfos = allFields.filter((info) => info.fieldName === fieldName);\r\n    const size = fieldInfos.length;\r\n    if (size === 0) {\r\n      return undefined;\r\n    }\r\n\r\n    console.log(\"entity key:\", entityKey);\r\n\r\n    const fieldKey = `${fieldName}(${stringifyVariables(fieldArgs)})`;\r\n    console.log(\"fieldKey:\", fieldKey);\r\n    const isItInTheCache = cache.resolve(\r\n      cache.resolveFieldByKey(entityKey, fieldKey) as string,\r\n      \"posts\"\r\n    );\r\n    console.log(\r\n      \"resolveFieldByKey:\",\r\n      cache.resolveFieldByKey(entityKey, fieldKey)\r\n    );\r\n\r\n    info.partial = !isItInTheCache;\r\n    console.log(\"info partial:\", info.partial);\r\n    let hasMore = true;\r\n    const results: string[] = [];\r\n    fieldInfos.forEach((fi) => {\r\n      const key = cache.resolveFieldByKey(entityKey, fi.fieldKey) as string;\r\n      const data = cache.resolve(key, \"posts\") as string[];\r\n      const _hasMore = cache.resolve(key, \"hasMore\");\r\n      if (!_hasMore) {\r\n        hasMore = _hasMore as boolean;\r\n      }\r\n      results.push(...data);\r\n    });\r\n\r\n    return {\r\n      __typename: \"PaginatedPosts\",\r\n      hasMore,\r\n      posts: results,\r\n    };\r\n\r\n    // const visited = new Set();\r\n    // let result: NullArray<string> = [];\r\n    // let prevOffset: number | null = null;\r\n\r\n    // for (let i = 0; i < size; i++) {\r\n    //   const { fieldKey, arguments: args } = fieldInfos[i];\r\n    //   if (args === null || !compareArgs(fieldArgs, args)) {\r\n    //     continue;\r\n    //   }\r\n\r\n    //   const links = cache.resolveFieldByKey(entityKey, fieldKey) as string[];\r\n    //   const currentOffset = args[cursorArgument];\r\n\r\n    //   if (\r\n    //     links === null ||\r\n    //     links.length === 0 ||\r\n    //     typeof currentOffset !== 'number'\r\n    //   ) {\r\n    //     continue;\r\n    //   }\r\n\r\n    //   if (!prevOffset || currentOffset > prevOffset) {\r\n    //     for (let j = 0; j < links.length; j++) {\r\n    //       const link = links[j];\r\n    //       if (visited.has(link)) continue;\r\n    //       result.push(link);\r\n    //       visited.add(link);\r\n    //     }\r\n    //   } else {\r\n    //     const tempResult: NullArray<string> = [];\r\n    //     for (let j = 0; j < links.length; j++) {\r\n    //       const link = links[j];\r\n    //       if (visited.has(link)) continue;\r\n    //       tempResult.push(link);\r\n    //       visited.add(link);\r\n    //     }\r\n    //     result = [...tempResult, ...result];\r\n    //   }\r\n\r\n    //   prevOffset = currentOffset;\r\n    // }\r\n\r\n    // const hasCurrentPage = cache.resolve(entityKey, fieldName, fieldArgs);\r\n    // if (hasCurrentPage) {\r\n    //   return result;\r\n    // } else if (!(info as any).store.schema) {\r\n    //   return undefined;\r\n    // } else {\r\n    //   info.partial = true;\r\n    //   return result;\r\n    // }\r\n  };\r\n};\r\n\r\nexport const createUrqlClient = (ssrExchange: any, ctx: any) => {\r\n  let cookie = \"\";\r\n  if (isServer()) {\r\n    console.log(\"We are server side rendering\");\r\n    cookie = ctx.req.headers.cookie;\r\n  }\r\n  return {\r\n    url: \"http://localhost:4000/graphql\",\r\n    fetchOptions: {\r\n      credentials: \"include\" as const,\r\n      headers: cookie\r\n        ? {\r\n            cookie,\r\n          }\r\n        : undefined,\r\n    },\r\n    exchanges: [\r\n      dedupExchange,\r\n      cacheExchange({\r\n        keys: {\r\n          PaginatedPosts: () => null,\r\n        },\r\n        resolvers: {\r\n          Query: {\r\n            posts: cursorPagination(),\r\n          },\r\n        },\r\n        updates: {\r\n          Mutation: {\r\n            vote: (_result, args, cache, info) => {\r\n              console.log(\"we are searching fragments for post\");\r\n              const { postId, value } = args as VoteMutationVariables;\r\n              const data = cache.readFragment(\r\n                gql`\r\n                  fragment _ on Post {\r\n                    id\r\n                    points\r\n                    voteStatus\r\n                  }\r\n                `,\r\n                { id: postId } as any\r\n              );\r\n              console.log(data);\r\n              if (data) {\r\n                if (data.voteStatus === value) {\r\n                  console.log(\"the voteStatus is the same as the value\");\r\n                  return;\r\n                }\r\n                const newPoints =\r\n                  (data.points as number) + (!data.voteStatus ? 1 : 2) * value;\r\n                cache.writeFragment(\r\n                  gql`\r\n                    fragment __ on Post {\r\n                      points\r\n                      voteStatus\r\n                    }\r\n                  `,\r\n                  { id: postId, points: newPoints, voteStatus: value } as any\r\n                );\r\n              }\r\n            },\r\n\r\n            createPost: (_result, args, cache, info) => {\r\n              const allFields = cache.inspectFields(\"Query\");\r\n              const fieldInfos = allFields.filter(\r\n                (info) => info.fieldName === \"posts\"\r\n              );\r\n              fieldInfos.forEach((fi) => {\r\n                cache.invalidate(\"Query\", \"posts\", fi.arguments || {});\r\n              });\r\n            },\r\n            logout: (_result, args, cache, info) => {\r\n              betterUpdateQuery<LogoutMutation, MeQuery>(\r\n                cache,\r\n                { query: MeDocument },\r\n                _result,\r\n                () => ({ me: null })\r\n              );\r\n            },\r\n            login: (_result, args, cache, info) => {\r\n              betterUpdateQuery<LoginMutation, MeQuery>(\r\n                cache,\r\n                { query: MeDocument },\r\n                _result,\r\n                (result, query) => {\r\n                  if (result.login.errors) {\r\n                    return query;\r\n                  } else {\r\n                    return {\r\n                      me: result.login.user,\r\n                    };\r\n                  }\r\n                }\r\n              );\r\n            },\r\n            register: (_result, args, cache, info) => {\r\n              betterUpdateQuery<RegisterMutation, MeQuery>(\r\n                cache,\r\n                { query: MeDocument },\r\n                _result,\r\n                (result, query) => {\r\n                  if (result.register.errors) {\r\n                    return query;\r\n                  } else {\r\n                    return {\r\n                      me: result.register.user,\r\n                    };\r\n                  }\r\n                }\r\n              );\r\n            },\r\n          },\r\n        },\r\n      }),\r\n      errorExchange,\r\n      ssrExchange,\r\n      fetchExchange,\r\n    ],\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}