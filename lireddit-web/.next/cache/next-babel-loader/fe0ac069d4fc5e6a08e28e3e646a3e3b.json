{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\FullstackReact\\\\lireddit-web\\\\src\\\\pages\\\\index.tsx\";\nvar __jsx = React.createElement;\nimport { withUrqlClient } from \"next-urql\";\nimport { createUrqlClient } from \"../utils/createUrqlClient\";\nimport { usePostsQuery } from \"../generated/graphql\";\nimport { Layout } from \"../components/Layout\";\nimport React, { useState } from \"react\";\nimport { Box, Button, Flex, Heading, Icon, Link, Stack, Text } from \"@chakra-ui/core\";\nimport NextLink from \"next/link\";\n\nconst Index = () => {\n  const {\n    0: variables,\n    1: setVariables\n  } = useState({\n    limit: 15,\n    cursor: null\n  });\n  const [{\n    data,\n    fetching\n  }] = usePostsQuery({\n    variables\n  });\n\n  if (!fetching && !data) {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 12\n      }\n    }, \" query failed for some reason\");\n  }\n\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, __jsx(Flex, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, __jsx(Heading, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, \"LiReddit\"), __jsx(NextLink, {\n    href: \"/create-post\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, __jsx(Link, {\n    ml: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }, \"Create Post\"))), __jsx(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }), !data && fetching ? __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, \"Loading...\") : __jsx(Stack, {\n    spacing: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, data.posts.posts.map(p => __jsx(Box, {\n    key: p.id,\n    p: 5,\n    shadow: \"md\",\n    borderWidth: \"1px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, __jsx(Icon, {\n    name: \"chevron-up\",\n    size: \"24px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 15\n    }\n  }), __jsx(Icon, {\n    name: \"chevron-down\",\n    size: \"24px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 15\n    }\n  }), __jsx(Heading, {\n    fontSize: \"xl\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 15\n    }\n  }, p.title), __jsx(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 15\n    }\n  }, \"posted by \", p.creator.username), __jsx(Text, {\n    mt: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 15\n    }\n  }, p.textSnippet)))), data && data.posts.hasMore ? __jsx(Flex, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    onClick: () => {\n      setVariables({\n        limit: variables.limit,\n        cursor: data.posts.posts[data.posts.posts.length - 1].createdAt\n      });\n    },\n    isLoading: fetching,\n    m: \"auto\",\n    my: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, \"load more\")) : null);\n};\n\nexport default withUrqlClient(createUrqlClient, {\n  ssr: true\n})(Index);","map":{"version":3,"sources":["C:/Users/User/FullstackReact/lireddit-web/src/pages/index.tsx"],"names":["withUrqlClient","createUrqlClient","usePostsQuery","Layout","React","useState","Box","Button","Flex","Heading","Icon","Link","Stack","Text","NextLink","Index","variables","setVariables","limit","cursor","data","fetching","posts","map","p","id","title","creator","username","textSnippet","hasMore","length","createdAt","ssr"],"mappings":";;AAAA,SAASA,cAAT,QAA+B,WAA/B;AACA,SAASC,gBAAT,QAAiC,2BAAjC;AACA,SAASC,aAAT,QAA8B,sBAA9B;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SACEC,GADF,EAEEC,MAFF,EAGEC,IAHF,EAIEC,OAJF,EAKEC,IALF,EAMEC,IANF,EAOEC,KAPF,EAQEC,IARF,QASO,iBATP;AAUA,OAAOC,QAAP,MAAqB,WAArB;;AAEA,MAAMC,KAAK,GAAG,MAAM;AAClB,QAAM;AAAA,OAACC,SAAD;AAAA,OAAYC;AAAZ,MAA4BZ,QAAQ,CAAC;AACzCa,IAAAA,KAAK,EAAE,EADkC;AAEzCC,IAAAA,MAAM,EAAE;AAFiC,GAAD,CAA1C;AAIA,QAAM,CAAC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAD,IAAuBnB,aAAa,CAAC;AACzCc,IAAAA;AADyC,GAAD,CAA1C;;AAIA,MAAI,CAACK,QAAD,IAAa,CAACD,IAAlB,EAAwB;AACtB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAAP;AACD;;AACD,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,KAAK,EAAC,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAEE,MAAC,QAAD;AAAU,IAAA,IAAI,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,EAAE,EAAC,MAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,CAFF,CADF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARF,EASG,CAACA,IAAD,IAASC,QAAT,GACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADD,GAGC,MAAC,KAAD;AAAO,IAAA,OAAO,EAAE,CAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,IAAI,CAAEE,KAAN,CAAYA,KAAZ,CAAkBC,GAAlB,CAAuBC,CAAD,IACrB,MAAC,GAAD;AAAK,IAAA,GAAG,EAAEA,CAAC,CAACC,EAAZ;AAAgB,IAAA,CAAC,EAAE,CAAnB;AAAsB,IAAA,MAAM,EAAC,IAA7B;AAAkC,IAAA,WAAW,EAAC,KAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,YAAX;AAAwB,IAAA,IAAI,EAAC,MAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE,MAAC,IAAD;AAAM,IAAA,IAAI,EAAC,cAAX;AAA0B,IAAA,IAAI,EAAC,MAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGE,MAAC,OAAD;AAAS,IAAA,QAAQ,EAAC,IAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwBD,CAAC,CAACE,KAA1B,CAHF,EAIE,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAiBF,CAAC,CAACG,OAAF,CAAUC,QAA3B,CAJF,EAKE,MAAC,IAAD;AAAM,IAAA,EAAE,EAAE,CAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAcJ,CAAC,CAACK,WAAhB,CALF,CADD,CADH,CAZJ,EAwBGT,IAAI,IAAIA,IAAI,CAACE,KAAL,CAAWQ,OAAnB,GACC,MAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,MAAD;AACE,IAAA,OAAO,EAAE,MAAM;AACbb,MAAAA,YAAY,CAAC;AACXC,QAAAA,KAAK,EAAEF,SAAS,CAACE,KADN;AAEXC,QAAAA,MAAM,EAAEC,IAAI,CAACE,KAAL,CAAWA,KAAX,CAAiBF,IAAI,CAACE,KAAL,CAAWA,KAAX,CAAiBS,MAAjB,GAA0B,CAA3C,EAA8CC;AAF3C,OAAD,CAAZ;AAID,KANH;AAOE,IAAA,SAAS,EAAEX,QAPb;AAQE,IAAA,CAAC,EAAC,MARJ;AASE,IAAA,EAAE,EAAE,CATN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,CADD,GAgBG,IAxCN,CADF;AA4CD,CAxDD;;AA0DA,eAAerB,cAAc,CAACC,gBAAD,EAAmB;AAAEgC,EAAAA,GAAG,EAAE;AAAP,CAAnB,CAAd,CAAgDlB,KAAhD,CAAf","sourcesContent":["import { withUrqlClient } from \"next-urql\";\nimport { createUrqlClient } from \"../utils/createUrqlClient\";\nimport { usePostsQuery } from \"../generated/graphql\";\nimport { Layout } from \"../components/Layout\";\nimport React, { useState } from \"react\";\nimport {\n  Box,\n  Button,\n  Flex,\n  Heading,\n  Icon,\n  Link,\n  Stack,\n  Text,\n} from \"@chakra-ui/core\";\nimport NextLink from \"next/link\";\n\nconst Index = () => {\n  const [variables, setVariables] = useState({\n    limit: 15,\n    cursor: null as null | string,\n  });\n  const [{ data, fetching }] = usePostsQuery({\n    variables,\n  });\n\n  if (!fetching && !data) {\n    return <div> query failed for some reason</div>;\n  }\n  return (\n    <Layout>\n      <Flex align=\"center\">\n        <Heading>LiReddit</Heading>\n        <NextLink href=\"/create-post\">\n          <Link ml=\"auto\">Create Post</Link>\n        </NextLink>\n      </Flex>\n\n      <br />\n      {!data && fetching ? (\n        <div>Loading...</div>\n      ) : (\n        <Stack spacing={8}>\n          {data!.posts.posts.map((p) => (\n            <Box key={p.id} p={5} shadow=\"md\" borderWidth=\"1px\">\n              <Icon name=\"chevron-up\" size=\"24px\" />\n              <Icon name=\"chevron-down\" size=\"24px\" />\n              <Heading fontSize=\"xl\">{p.title}</Heading>\n              <Text>posted by {p.creator.username}</Text>\n              <Text mt={4}>{p.textSnippet}</Text>\n            </Box>\n          ))}\n        </Stack>\n      )}\n      {data && data.posts.hasMore ? (\n        <Flex>\n          <Button\n            onClick={() => {\n              setVariables({\n                limit: variables.limit,\n                cursor: data.posts.posts[data.posts.posts.length - 1].createdAt,\n              });\n            }}\n            isLoading={fetching}\n            m=\"auto\"\n            my={8}\n          >\n            load more\n          </Button>\n        </Flex>\n      ) : null}\n    </Layout>\n  );\n};\n\nexport default withUrqlClient(createUrqlClient, { ssr: true })(Index);\n"]},"metadata":{},"sourceType":"module"}