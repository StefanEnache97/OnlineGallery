{"ast":null,"code":"import { dedupExchange, fetchExchange } from \"urql\";\nimport { cacheExchange } from \"@urql/exchange-graphcache\";\nimport { MeDocument } from \"../generated/graphql\";\nimport { betterUpdateQuery } from \"./betterUpdateQuery\";\nimport { pipe, tap } from \"wonka\";\n\nvar errorExchange = function errorExchange(_ref) {\n  var forward = _ref.forward;\n  return function (ops$) {\n    return pipe(forward(ops$), tap(function (_ref2) {\n      var error = _ref2.error;\n\n      if (error) {\n        sentryFireAndForgetHere();\n      }\n    }));\n  };\n};\n\nexport var createUrqlClient = function createUrqlClient(ssrExchange) {\n  return {\n    url: \"http://localhost:4000/graphql\",\n    fetchOptions: {\n      credentials: \"include\"\n    },\n    exchanges: [dedupExchange, cacheExchange({\n      updates: {\n        Mutation: {\n          logout: function logout(_result, args, cache, info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function () {\n              return {\n                me: null\n              };\n            });\n          },\n          login: function login(_result, args, cache, info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function (result, query) {\n              if (result.login.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.login.user\n                };\n              }\n            });\n          },\n          register: function register(_result, args, cache, info) {\n            betterUpdateQuery(cache, {\n              query: MeDocument\n            }, _result, function (result, query) {\n              if (result.register.errors) {\n                return query;\n              } else {\n                return {\n                  me: result.register.user\n                };\n              }\n            });\n          }\n        }\n      }\n    }), ssrExchange, fetchExchange]\n  };\n};","map":{"version":3,"sources":["C:/Users/User/FullstackReact/lireddit-web/src/utils/createUrqlClient.ts"],"names":["dedupExchange","fetchExchange","cacheExchange","MeDocument","betterUpdateQuery","pipe","tap","errorExchange","forward","ops$","error","sentryFireAndForgetHere","createUrqlClient","ssrExchange","url","fetchOptions","credentials","exchanges","updates","Mutation","logout","_result","args","cache","info","query","me","login","result","errors","user","register"],"mappings":"AAAA,SAASA,aAAT,EAAkCC,aAAlC,QAAuD,MAAvD;AACA,SAASC,aAAT,QAA8B,2BAA9B;AACA,SAGEC,UAHF,QAMO,sBANP;AAOA,SAASC,iBAAT,QAAkC,qBAAlC;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,OAA1B;;AAEA,IAAMC,aAAuB,GAAG,SAA1BA,aAA0B;AAAA,MAAGC,OAAH,QAAGA,OAAH;AAAA,SAAiB,UAACC,IAAD,EAAU;AACzD,WAAOJ,IAAI,CACTG,OAAO,CAACC,IAAD,CADE,EAETH,GAAG,CAAC,iBAAe;AAAA,UAAZI,KAAY,SAAZA,KAAY;;AACjB,UAAIA,KAAJ,EAAW;AACTC,QAAAA,uBAAuB;AACxB;AACF,KAJE,CAFM,CAAX;AAQD,GAT+B;AAAA,CAAhC;;AAWA,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,WAAD;AAAA,SAAuB;AACrDC,IAAAA,GAAG,EAAE,+BADgD;AAErDC,IAAAA,YAAY,EAAE;AACZC,MAAAA,WAAW,EAAE;AADD,KAFuC;AAKrDC,IAAAA,SAAS,EAAE,CACTjB,aADS,EAETE,aAAa,CAAC;AACZgB,MAAAA,OAAO,EAAE;AACPC,QAAAA,QAAQ,EAAE;AACRC,UAAAA,MAAM,EAAE,gBAACC,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,EAAgC;AACtCpB,YAAAA,iBAAiB,CACfmB,KADe,EAEf;AAAEE,cAAAA,KAAK,EAAEtB;AAAT,aAFe,EAGfkB,OAHe,EAIf;AAAA,qBAAO;AAAEK,gBAAAA,EAAE,EAAE;AAAN,eAAP;AAAA,aAJe,CAAjB;AAMD,WARO;AASRC,UAAAA,KAAK,EAAE,eAACN,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,EAAgC;AACrCpB,YAAAA,iBAAiB,CACfmB,KADe,EAEf;AAAEE,cAAAA,KAAK,EAAEtB;AAAT,aAFe,EAGfkB,OAHe,EAIf,UAACO,MAAD,EAASH,KAAT,EAAmB;AACjB,kBAAIG,MAAM,CAACD,KAAP,CAAaE,MAAjB,EAAyB;AACvB,uBAAOJ,KAAP;AACD,eAFD,MAEO;AACL,uBAAO;AACLC,kBAAAA,EAAE,EAAEE,MAAM,CAACD,KAAP,CAAaG;AADZ,iBAAP;AAGD;AACF,aAZc,CAAjB;AAcD,WAxBO;AAyBRC,UAAAA,QAAQ,EAAE,kBAACV,OAAD,EAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,IAAvB,EAAgC;AACxCpB,YAAAA,iBAAiB,CACfmB,KADe,EAEf;AAAEE,cAAAA,KAAK,EAAEtB;AAAT,aAFe,EAGfkB,OAHe,EAIf,UAACO,MAAD,EAASH,KAAT,EAAmB;AACjB,kBAAIG,MAAM,CAACG,QAAP,CAAgBF,MAApB,EAA4B;AAC1B,uBAAOJ,KAAP;AACD,eAFD,MAEO;AACL,uBAAO;AACLC,kBAAAA,EAAE,EAAEE,MAAM,CAACG,QAAP,CAAgBD;AADf,iBAAP;AAGD;AACF,aAZc,CAAjB;AAcD;AAxCO;AADH;AADG,KAAD,CAFJ,EAgDTjB,WAhDS,EAiDTZ,aAjDS;AAL0C,GAAvB;AAAA,CAAzB","sourcesContent":["import { dedupExchange, Exchange, fetchExchange } from \"urql\";\r\nimport { cacheExchange } from \"@urql/exchange-graphcache\";\r\nimport {\r\n  LogoutMutation,\r\n  MeQuery,\r\n  MeDocument,\r\n  LoginMutation,\r\n  RegisterMutation,\r\n} from \"../generated/graphql\";\r\nimport { betterUpdateQuery } from \"./betterUpdateQuery\";\r\nimport { pipe, tap } from \"wonka\";\r\n\r\nconst errorExchange: Exchange = ({ forward }) => (ops$) => {\r\n  return pipe(\r\n    forward(ops$),\r\n    tap(({ error }) => {\r\n      if (error) {\r\n        sentryFireAndForgetHere();\r\n      }\r\n    })\r\n  );\r\n};\r\n\r\nexport const createUrqlClient = (ssrExchange: any) => ({\r\n  url: \"http://localhost:4000/graphql\",\r\n  fetchOptions: {\r\n    credentials: \"include\" as const,\r\n  },\r\n  exchanges: [\r\n    dedupExchange,\r\n    cacheExchange({\r\n      updates: {\r\n        Mutation: {\r\n          logout: (_result, args, cache, info) => {\r\n            betterUpdateQuery<LogoutMutation, MeQuery>(\r\n              cache,\r\n              { query: MeDocument },\r\n              _result,\r\n              () => ({ me: null })\r\n            );\r\n          },\r\n          login: (_result, args, cache, info) => {\r\n            betterUpdateQuery<LoginMutation, MeQuery>(\r\n              cache,\r\n              { query: MeDocument },\r\n              _result,\r\n              (result, query) => {\r\n                if (result.login.errors) {\r\n                  return query;\r\n                } else {\r\n                  return {\r\n                    me: result.login.user,\r\n                  };\r\n                }\r\n              }\r\n            );\r\n          },\r\n          register: (_result, args, cache, info) => {\r\n            betterUpdateQuery<RegisterMutation, MeQuery>(\r\n              cache,\r\n              { query: MeDocument },\r\n              _result,\r\n              (result, query) => {\r\n                if (result.register.errors) {\r\n                  return query;\r\n                } else {\r\n                  return {\r\n                    me: result.register.user,\r\n                  };\r\n                }\r\n              }\r\n            );\r\n          },\r\n        },\r\n      },\r\n    }),\r\n    ssrExchange,\r\n    fetchExchange,\r\n  ],\r\n});\r\n"]},"metadata":{},"sourceType":"module"}