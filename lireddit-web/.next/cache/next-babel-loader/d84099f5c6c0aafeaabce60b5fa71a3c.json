{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\User\\\\FullstackReact\\\\lireddit-web\\\\src\\\\components\\\\InputField.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { FormControl, FormLabel, Input, FormErrorMessage } from '@chakra-ui/core';\nimport { useField } from 'formik';\nexport var InputField = function InputField(props) {\n  _s();\n\n  var _useField = useField(props),\n      _useField2 = _slicedToArray(_useField, 2),\n      field = _useField2[0],\n      error = _useField2[1].error;\n\n  return __jsx(FormControl, {\n    isInvalid: !!error,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: field.name,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 17\n    }\n  }, props.label), __jsx(Input, _extends({}, field, {\n    id: field.name,\n    placeholder: props.placeholder,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 17\n    }\n  })), error ? __jsx(FormErrorMessage, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 26\n    }\n  }, error) : null);\n};\n\n_s(InputField, \"E2Ps/Wxn5Vr7Iec8yl5nZ8hmXyg=\", false, function () {\n  return [useField];\n});\n\n_c = InputField;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputField\");","map":{"version":3,"sources":["C:/Users/User/FullstackReact/lireddit-web/src/components/InputField.tsx"],"names":["React","FormControl","FormLabel","Input","FormErrorMessage","useField","InputField","props","field","error","name","label","placeholder"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,KAAjC,EAAwCC,gBAAxC,QAAgE,iBAAhE;AACA,SAASC,QAAT,QAAyB,QAAzB;AAQA,OAAO,IAAMC,UAAqC,GAAG,SAAxCA,UAAwC,CAACC,KAAD,EAAW;AAAA;;AAAA,kBACnCF,QAAQ,CAACE,KAAD,CAD2B;AAAA;AAAA,MACrDC,KADqD;AAAA,MAC7CC,KAD6C,iBAC7CA,KAD6C;;AAExD,SACI,MAAC,WAAD;AAAa,IAAA,SAAS,EAAE,CAAC,CAACA,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,SAAD;AAAW,IAAA,OAAO,EAAED,KAAK,CAACE,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiCH,KAAK,CAACI,KAAvC,CADJ,EAEI,MAAC,KAAD,eAAWH,KAAX;AAAkB,IAAA,EAAE,EAAEA,KAAK,CAACE,IAA5B;AAAkC,IAAA,WAAW,EAAEH,KAAK,CAACK,WAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFJ,EAGKH,KAAK,GAAG,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmBA,KAAnB,CAAH,GAAkD,IAH5D,CADJ;AAOP,CATM;;GAAMH,U;UACgBD,Q;;;KADhBC,U","sourcesContent":["import React, { InputHTMLAttributes } from 'react'\r\nimport { FormControl, FormLabel, Input, FormErrorMessage } from '@chakra-ui/core';\r\nimport { useField } from 'formik';\r\n\r\ntype InputFieldProps = InputHTMLAttributes<HTMLInputElement> & {\r\n    label: string;\r\n    placeholder: string;\r\n    name: string;\r\n}\r\n\r\nexport const InputField: React.FC<InputFieldProps> = (props) => {\r\n    const [field, {error}] = useField(props);\r\n        return (\r\n            <FormControl isInvalid={!!error}>\r\n                <FormLabel htmlFor={field.name}>{props.label}</FormLabel>\r\n                <Input {...field} id={field.name} placeholder={props.placeholder} />\r\n                {error ? <FormErrorMessage>{error}</FormErrorMessage> : null}\r\n            </FormControl>\r\n        );\r\n}"]},"metadata":{},"sourceType":"module"}