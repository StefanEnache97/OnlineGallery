{"ast":null,"code":"import { dedupExchange, fetchExchange, stringifyVariables } from \"urql\";\nimport { cacheExchange } from \"@urql/exchange-graphcache\";\nimport { MeDocument } from \"../generated/graphql\";\nimport { betterUpdateQuery } from \"./betterUpdateQuery\";\nimport { pipe, tap } from \"wonka\";\nimport Router from \"next/router\";\n\nconst errorExchange = ({\n  forward\n}) => ops$ => {\n  return pipe(forward(ops$), tap(({\n    error\n  }) => {\n    if (error === null || error === void 0 ? void 0 : error.message.includes(\"not authenticated\")) {\n      Router.replace(\"/login\");\n    }\n  }));\n};\n\nconst cursorPagination = () => {\n  return (_parent, fieldArgs, cache, info) => {\n    const {\n      parentKey: entityKey,\n      fieldName\n    } = info;\n    const allFields = cache.inspectFields(entityKey);\n    const fieldInfos = allFields.filter(info => info.fieldName === fieldName);\n    const size = fieldInfos.length;\n\n    if (size === 0) {\n      return undefined;\n    }\n\n    console.log(\"entity key:\", entityKey);\n    const fieldKey = `${fieldName}(${stringifyVariables(fieldArgs)})`;\n    console.log(\"fieldKey:\", fieldKey);\n    const isItInTheCache = cache.resolve(cache.resolveFieldByKey(entityKey, fieldKey), \"posts\");\n    console.log(\"resolveFieldByKey:\", cache.resolveFieldByKey(entityKey, fieldKey));\n    info.partial = !isItInTheCache;\n    console.log(\"info partial:\", info.partial);\n    let hasMore = true;\n    const results = [];\n    fieldInfos.forEach(fi => {\n      const key = cache.resolveFieldByKey(entityKey, fi.fieldKey);\n      const data = cache.resolve(key, \"posts\");\n\n      const _hasMore = cache.resolve(key, \"hasMore\");\n\n      if (!_hasMore) {\n        hasMore = _hasMore;\n      }\n\n      results.push(...data);\n    });\n    return {\n      hasMore,\n      posts: results\n    }; // const visited = new Set();\n    // let result: NullArray<string> = [];\n    // let prevOffset: number | null = null;\n    // for (let i = 0; i < size; i++) {\n    //   const { fieldKey, arguments: args } = fieldInfos[i];\n    //   if (args === null || !compareArgs(fieldArgs, args)) {\n    //     continue;\n    //   }\n    //   const links = cache.resolveFieldByKey(entityKey, fieldKey) as string[];\n    //   const currentOffset = args[cursorArgument];\n    //   if (\n    //     links === null ||\n    //     links.length === 0 ||\n    //     typeof currentOffset !== 'number'\n    //   ) {\n    //     continue;\n    //   }\n    //   if (!prevOffset || currentOffset > prevOffset) {\n    //     for (let j = 0; j < links.length; j++) {\n    //       const link = links[j];\n    //       if (visited.has(link)) continue;\n    //       result.push(link);\n    //       visited.add(link);\n    //     }\n    //   } else {\n    //     const tempResult: NullArray<string> = [];\n    //     for (let j = 0; j < links.length; j++) {\n    //       const link = links[j];\n    //       if (visited.has(link)) continue;\n    //       tempResult.push(link);\n    //       visited.add(link);\n    //     }\n    //     result = [...tempResult, ...result];\n    //   }\n    //   prevOffset = currentOffset;\n    // }\n    // const hasCurrentPage = cache.resolve(entityKey, fieldName, fieldArgs);\n    // if (hasCurrentPage) {\n    //   return result;\n    // } else if (!(info as any).store.schema) {\n    //   return undefined;\n    // } else {\n    //   info.partial = true;\n    //   return result;\n    // }\n  };\n};\n\nexport const createUrqlClient = ssrExchange => ({\n  url: \"http://localhost:4000/graphql\",\n  fetchOptions: {\n    credentials: \"include\"\n  },\n  exchanges: [dedupExchange, cacheExchange({\n    resolvers: {\n      Query: {\n        posts: cursorPagination()\n      }\n    },\n    updates: {\n      Mutation: {\n        logout: (_result, args, cache, info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, () => ({\n            me: null\n          }));\n        },\n        login: (_result, args, cache, info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, (result, query) => {\n            if (result.login.errors) {\n              return query;\n            } else {\n              return {\n                me: result.login.user\n              };\n            }\n          });\n        },\n        register: (_result, args, cache, info) => {\n          betterUpdateQuery(cache, {\n            query: MeDocument\n          }, _result, (result, query) => {\n            if (result.register.errors) {\n              return query;\n            } else {\n              return {\n                me: result.register.user\n              };\n            }\n          });\n        }\n      }\n    }\n  }), errorExchange, ssrExchange, fetchExchange]\n});","map":{"version":3,"sources":["C:/Users/User/FullstackReact/lireddit-web/src/utils/createUrqlClient.ts"],"names":["dedupExchange","fetchExchange","stringifyVariables","cacheExchange","MeDocument","betterUpdateQuery","pipe","tap","Router","errorExchange","forward","ops$","error","message","includes","replace","cursorPagination","_parent","fieldArgs","cache","info","parentKey","entityKey","fieldName","allFields","inspectFields","fieldInfos","filter","size","length","undefined","console","log","fieldKey","isItInTheCache","resolve","resolveFieldByKey","partial","hasMore","results","forEach","fi","key","data","_hasMore","push","posts","createUrqlClient","ssrExchange","url","fetchOptions","credentials","exchanges","resolvers","Query","updates","Mutation","logout","_result","args","query","me","login","result","errors","user","register"],"mappings":"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","sourcesContent":["import {\r\n  dedupExchange,\r\n  Exchange,\r\n  fetchExchange,\r\n  stringifyVariables,\r\n} from \"urql\";\r\nimport { cacheExchange, Resolver } from \"@urql/exchange-graphcache\";\r\nimport {\r\n  LogoutMutation,\r\n  MeQuery,\r\n  MeDocument,\r\n  LoginMutation,\r\n  RegisterMutation,\r\n} from \"../generated/graphql\";\r\nimport { betterUpdateQuery } from \"./betterUpdateQuery\";\r\nimport { pipe, tap } from \"wonka\";\r\nimport Router from \"next/router\";\r\n\r\nconst errorExchange: Exchange = ({ forward }) => (ops$) => {\r\n  return pipe(\r\n    forward(ops$),\r\n    tap(({ error }) => {\r\n      if (error?.message.includes(\"not authenticated\")) {\r\n        Router.replace(\"/login\");\r\n      }\r\n    })\r\n  );\r\n};\r\n\r\nconst cursorPagination = (): Resolver => {\r\n  return (_parent, fieldArgs, cache, info) => {\r\n    const { parentKey: entityKey, fieldName } = info;\r\n\r\n    const allFields = cache.inspectFields(entityKey);\r\n    const fieldInfos = allFields.filter((info) => info.fieldName === fieldName);\r\n    const size = fieldInfos.length;\r\n    if (size === 0) {\r\n      return undefined;\r\n    }\r\n\r\n    console.log(\"entity key:\", entityKey);\r\n\r\n    const fieldKey = `${fieldName}(${stringifyVariables(fieldArgs)})`;\r\n    console.log(\"fieldKey:\", fieldKey);\r\n    const isItInTheCache = cache.resolve(\r\n      cache.resolveFieldByKey(entityKey, fieldKey) as string,\r\n      \"posts\"\r\n    );\r\n    console.log(\r\n      \"resolveFieldByKey:\",\r\n      cache.resolveFieldByKey(entityKey, fieldKey)\r\n    );\r\n\r\n    info.partial = !isItInTheCache;\r\n    console.log(\"info partial:\", info.partial);\r\n    let hasMore = true;\r\n    const results: string[] = [];\r\n    fieldInfos.forEach((fi) => {\r\n      const key = cache.resolveFieldByKey(entityKey, fi.fieldKey) as string;\r\n      const data = cache.resolve(key, \"posts\") as string[];\r\n      const _hasMore = cache.resolve(key, \"hasMore\");\r\n      if (!_hasMore) {\r\n        hasMore = _hasMore as boolean;\r\n      }\r\n      results.push(...data);\r\n    });\r\n\r\n    return {\r\n      hasMore,\r\n      posts: results,\r\n    };\r\n\r\n    // const visited = new Set();\r\n    // let result: NullArray<string> = [];\r\n    // let prevOffset: number | null = null;\r\n\r\n    // for (let i = 0; i < size; i++) {\r\n    //   const { fieldKey, arguments: args } = fieldInfos[i];\r\n    //   if (args === null || !compareArgs(fieldArgs, args)) {\r\n    //     continue;\r\n    //   }\r\n\r\n    //   const links = cache.resolveFieldByKey(entityKey, fieldKey) as string[];\r\n    //   const currentOffset = args[cursorArgument];\r\n\r\n    //   if (\r\n    //     links === null ||\r\n    //     links.length === 0 ||\r\n    //     typeof currentOffset !== 'number'\r\n    //   ) {\r\n    //     continue;\r\n    //   }\r\n\r\n    //   if (!prevOffset || currentOffset > prevOffset) {\r\n    //     for (let j = 0; j < links.length; j++) {\r\n    //       const link = links[j];\r\n    //       if (visited.has(link)) continue;\r\n    //       result.push(link);\r\n    //       visited.add(link);\r\n    //     }\r\n    //   } else {\r\n    //     const tempResult: NullArray<string> = [];\r\n    //     for (let j = 0; j < links.length; j++) {\r\n    //       const link = links[j];\r\n    //       if (visited.has(link)) continue;\r\n    //       tempResult.push(link);\r\n    //       visited.add(link);\r\n    //     }\r\n    //     result = [...tempResult, ...result];\r\n    //   }\r\n\r\n    //   prevOffset = currentOffset;\r\n    // }\r\n\r\n    // const hasCurrentPage = cache.resolve(entityKey, fieldName, fieldArgs);\r\n    // if (hasCurrentPage) {\r\n    //   return result;\r\n    // } else if (!(info as any).store.schema) {\r\n    //   return undefined;\r\n    // } else {\r\n    //   info.partial = true;\r\n    //   return result;\r\n    // }\r\n  };\r\n};\r\n\r\nexport const createUrqlClient = (ssrExchange: any) => ({\r\n  url: \"http://localhost:4000/graphql\",\r\n  fetchOptions: {\r\n    credentials: \"include\" as const,\r\n  },\r\n  exchanges: [\r\n    dedupExchange,\r\n    cacheExchange({\r\n      resolvers: {\r\n        Query: {\r\n          posts: cursorPagination(),\r\n        },\r\n      },\r\n      updates: {\r\n        Mutation: {\r\n          logout: (_result, args, cache, info) => {\r\n            betterUpdateQuery<LogoutMutation, MeQuery>(\r\n              cache,\r\n              { query: MeDocument },\r\n              _result,\r\n              () => ({ me: null })\r\n            );\r\n          },\r\n          login: (_result, args, cache, info) => {\r\n            betterUpdateQuery<LoginMutation, MeQuery>(\r\n              cache,\r\n              { query: MeDocument },\r\n              _result,\r\n              (result, query) => {\r\n                if (result.login.errors) {\r\n                  return query;\r\n                } else {\r\n                  return {\r\n                    me: result.login.user,\r\n                  };\r\n                }\r\n              }\r\n            );\r\n          },\r\n          register: (_result, args, cache, info) => {\r\n            betterUpdateQuery<RegisterMutation, MeQuery>(\r\n              cache,\r\n              { query: MeDocument },\r\n              _result,\r\n              (result, query) => {\r\n                if (result.register.errors) {\r\n                  return query;\r\n                } else {\r\n                  return {\r\n                    me: result.register.user,\r\n                  };\r\n                }\r\n              }\r\n            );\r\n          },\r\n        },\r\n      },\r\n    }),\r\n    errorExchange,\r\n    ssrExchange,\r\n    fetchExchange,\r\n  ],\r\n});\r\n"]},"metadata":{},"sourceType":"module"}