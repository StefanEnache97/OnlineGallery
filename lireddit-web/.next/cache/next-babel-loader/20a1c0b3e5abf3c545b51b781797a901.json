{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\User\\\\FullstackReact\\\\lireddit-web\\\\src\\\\components\\\\InputField.tsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { FormControl, FormLabel, Input, FormErrorMessage, Textarea } from \"@chakra-ui/core\";\nimport { useField } from \"formik\";\nexport var InputField = function InputField(_ref) {\n  _s();\n\n  var label = _ref.label,\n      textarea = _ref.textarea,\n      _ = _ref.size,\n      props = _objectWithoutProperties(_ref, [\"label\", \"textarea\", \"size\"]);\n\n  var InputOrTextarea = Input;\n\n  if (textarea) {\n    InputOrTextarea = Textarea;\n  }\n\n  var _useField = useField(props),\n      _useField2 = _slicedToArray(_useField, 2),\n      field = _useField2[0],\n      error = _useField2[1].error;\n\n  return __jsx(FormControl, {\n    isInvalid: !!error,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, __jsx(FormLabel, {\n    htmlFor: field.name,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, label), __jsx(InputOrTextarea, _extends({}, field, props, {\n    id: field.name,\n    placeholder: props.placeholder,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  })), error ? __jsx(FormErrorMessage, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 16\n    }\n  }, error) : null);\n};\n\n_s(InputField, \"DpPuTb9nPdu6NyyZR63Xu5KSrwc=\", false, function () {\n  return [useField];\n});\n\n_c = InputField;\n\nvar _c;\n\n$RefreshReg$(_c, \"InputField\");","map":{"version":3,"sources":["C:/Users/User/FullstackReact/lireddit-web/src/components/InputField.tsx"],"names":["React","FormControl","FormLabel","Input","FormErrorMessage","Textarea","useField","InputField","label","textarea","_","size","props","InputOrTextarea","field","error","name","placeholder"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAA2C,OAA3C;AACA,SACEC,WADF,EAEEC,SAFF,EAGEC,KAHF,EAIEC,gBAJF,EAKEC,QALF,QAMO,iBANP;AAOA,SAASC,QAAT,QAAyB,QAAzB;AAQA,OAAO,IAAMC,UAAqC,GAAG,SAAxCA,UAAwC,OAK/C;AAAA;;AAAA,MAJJC,KAII,QAJJA,KAII;AAAA,MAHJC,QAGI,QAHJA,QAGI;AAAA,MAFEC,CAEF,QAFJC,IAEI;AAAA,MADDC,KACC;;AACJ,MAAIC,eAAe,GAAGV,KAAtB;;AACA,MAAIM,QAAJ,EAAc;AACZI,IAAAA,eAAe,GAAGR,QAAlB;AACD;;AAJG,kBAKuBC,QAAQ,CAACM,KAAD,CAL/B;AAAA;AAAA,MAKGE,KALH;AAAA,MAKYC,KALZ,iBAKYA,KALZ;;AAMJ,SACE,MAAC,WAAD;AAAa,IAAA,SAAS,EAAE,CAAC,CAACA,KAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAW,IAAA,OAAO,EAAED,KAAK,CAACE,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAiCR,KAAjC,CADF,EAEE,MAAC,eAAD,eACMM,KADN,EAEMF,KAFN;AAGE,IAAA,EAAE,EAAEE,KAAK,CAACE,IAHZ;AAIE,IAAA,WAAW,EAAEJ,KAAK,CAACK,WAJrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFF,EAQGF,KAAK,GAAG,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmBA,KAAnB,CAAH,GAAkD,IAR1D,CADF;AAYD,CAvBM;;GAAMR,U;UAUgBD,Q;;;KAVhBC,U","sourcesContent":["import React, { InputHTMLAttributes } from \"react\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  Input,\r\n  FormErrorMessage,\r\n  Textarea,\r\n} from \"@chakra-ui/core\";\r\nimport { useField } from \"formik\";\r\n\r\ntype InputFieldProps = InputHTMLAttributes<HTMLInputElement> & {\r\n  label: string;\r\n  name: string;\r\n  textarea?: boolean;\r\n};\r\n\r\nexport const InputField: React.FC<InputFieldProps> = ({\r\n  label,\r\n  textarea,\r\n  size: _,\r\n  ...props\r\n}) => {\r\n  let InputOrTextarea = Input;\r\n  if (textarea) {\r\n    InputOrTextarea = Textarea;\r\n  }\r\n  const [field, { error }] = useField(props);\r\n  return (\r\n    <FormControl isInvalid={!!error}>\r\n      <FormLabel htmlFor={field.name}>{label}</FormLabel>\r\n      <InputOrTextarea\r\n        {...field}\r\n        {...props}\r\n        id={field.name}\r\n        placeholder={props.placeholder}\r\n      />\r\n      {error ? <FormErrorMessage>{error}</FormErrorMessage> : null}\r\n    </FormControl>\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}